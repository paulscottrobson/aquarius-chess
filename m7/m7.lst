              	; --------------------------------------
              	; zasm: assemble "m7.asm"
              	; date: 2021-10-16 05:57:52
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		m7.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th October 2021
              	;		Purpose :	M7 Main.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
C000:         	CodeStart = 0xC000
FFFF:         	CodeEnd = 0xFFFF
              	
C000:         		.org CodeStart
              	
              	; ***************************************************************************************
              	;
              	; 									  Code Header
              	;
              	; ***************************************************************************************
              	
C000:         	start: 								
C000: ED7B1CC0		ld 		sp,(StackPointer) 				; have a workable stack
C004: 2A20C0  		ld 		hl,(StartAddress) 				; running from here
C007: E9      		jp 		(hl) 							
              	
C008: FFFFFFFF		.org 	start+16 						; information area
C00C: FFFFFFFF	
C010: 00C0    		.word 	start 							; +$10 base address of kernel
C012: 1CC0    		.word 	DataArea  						; +$12 address of data area.
C014: 38C0    		.word	CopyFollowing  					; +$14 utility function addresses
C016: 45C0    		.word	CompileCallFollowing
C018: 4FC0    		.word	CompileWord
C01A: 5EC0    		.word	CompileByte
              	
              		.include "data.asm" 					; data area.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th October 2021
              	;		Purpose :	Data 
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; ***************************************************************************************
              	;
              	;										Data Area
              	;
              	; ***************************************************************************************
              	
C01C:         	DataArea:
              	;
              	; 		Initial Stack Pointer
              	;
C01C:         	StackPointer:
C01C: FF3F    		.dw 	$3FFF
              	;
              	; 		Next free code byte
              	;
C01E:         	CodeNextFree:
C01E: 28C3    		.dw 	FreeSpace
              	;
              	; 		Execute address for startup
              	;
C020:         	StartAddress:	
C020: 2AC0    		.dw 	Main
              	;
              	; 		Dictionary start (works down)
              	;
C022:         	DictionaryBase:
C022: B3FE    		.dw 	DictionaryInstalledBase
              	;
              	; 		Current state of the 3 registers
              	;
C024:         	RegA:
C024: 0000    		.dw 	$0000
C026:         	RegB:
C026: 0000    		.dw 	$0000
C028:         	RegC:
C028: 0000    		.dw 	$0000
              		.include "kernel/kernel.asm"			; kernel code.	
C02A:         	Main:
C02A: 2113E0  		ld 		hl,testCode
C02D: CD69C0  		call 	CompileStream
              	
C030:         	WarmStart:
C030: 76      		.byte $76
C031: ED7B1CC0		ld 		sp,(StackPointer)
C035: C330C0  		jp 		WarmStart	
              	
              		.include 	"code.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		code.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th October 2021
              	;		Purpose :	Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 		Copy the code following (length byte first) then pop to previous level.
              	;
              	; ***************************************************************************************
              	
C038:         	CopyFollowing:
C038: E3      		ex 		(sp),hl  				 		; old HL saved on stack, HL contains length pointer
C039: C5      		push 	bc 								; save BC
C03A: 46      		ld 		b,(hl) 							; get count to copy
C03B:         	_CopyFollowing:
C03B: 23      		inc 	hl 								; get next to copy
C03C: 7E      		ld 		a,(hl)
C03D: CD5EC0  		call 	CompileByte 					; and compile it.
C040: 10F9    		djnz 	_CopyFollowing 					; copy that many bytes.	
C042: C1      		pop 	bc 								; restore BC, HL
C043: E1      		pop 	hl 
C044: C9      		ret 									; return to the previous level.
              	
              	; ***************************************************************************************
              	;
              	; 							Compile call to following code
              	;
              	; ***************************************************************************************
              	
C045:         	CompileCallFollowing:
C045: 3ECD    		ld 		a,$CD 							; CD is Z80 "CALL" 
C047: CD5EC0  		call 	CompileByte
C04A: E1      		pop 	hl 								; get address to compile call to
C04B: CD4FC0  		call 	CompileWord
C04E: C9      		ret 									; return to the previous level.
              	
              	; ***************************************************************************************
              	;
              	;									Compile HL to Code Space
              	;
              	; ***************************************************************************************
              	
C04F:         	CompileWord:
C04F: EB      		ex 		de,hl 							; DE contains value
C050: E5      		push 	hl 								; save HL
C051: 2A1EC0  		ld 		hl,(CodeNextFree) 				; get code address
C054: 73      		ld 		(hl),e 							; write out
C055: 23      		inc 	hl 
C056: 72      		ld 		(hl),d
C057: 23      		inc 	hl
C058: 221EC0  		ld 		(CodeNextFree),hl 				; update code address
C05B: E1      		pop 	hl 								; restore HL, DE
C05C: EB      		ex 		de,hl 							
C05D: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;									Compile A to Code Space
              	;
              	; ***************************************************************************************
              	
C05E:         	CompileByte:
C05E: E5      		push 	hl 								; save HL, get code address
C05F: 2A1EC0  		ld 		hl,(CodeNextFree)
C062: 77      		ld 		(hl),a  						; write out
C063: 23      		inc 	hl 								; bump & write back
C064: 221EC0  		ld 		(CodeNextFree),hl
C067: E1      		pop 	hl 	
C068: C9      		ret
              		.include 	"compiler.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th October 2021
              	;		Purpose :	Compile stream defining executing or compiling words 
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 	Compile stream at HL, executing, compiling or defining words according to their 
              	; 	colour. This is not re-entrant, as it exits to the warm start unless it goes to 
              	; 	compile something else.
              	;
              	; ***************************************************************************************
              	
C069:         	CompileStream:
C069: 7E      			ld 		a,(hl) 						; get next character
C06A: B7      			or 		a 							; if zero, warm start as end of stream
C06B: CA30C0  			jp 		z,WarmStart
C06E: 23      			inc 	hl 							; increment in case it is space
C06F: E63F    			and 	$3F 						; check it is a coloured space.
C071: FE20    			cp 		$20
C073: 28F4    			jr 		z,CompileStream 			; if so go back
C075: 2B      			dec 	hl 							; undo the get, so points to the non space non zero byte.
C076: CD86C0  			call 	CompileOne 					; compile word at HL.
              			;
C079:         	_CSNext:		
C079: 7E      			ld 		a,(hl) 						; advance forward to next word
C07A: B7      			or 		a 							; if found $00 end of stream go back to CompileStream
C07B: 28EC    			jr 		z,CompileStream
C07D: 23      			inc 	hl
C07E: E63F    			and 	#$3F 						; check for colour space
C080: FE20    			cp 		$20
C082: 20F5    			jr 		nz,_CSNext
C084: 18E3    			jr 		CompileStream 				; once found, try the next word.
              	
              	; ***************************************************************************************
              	;
              	; 						  Compile/Execute/Define word at HL.
              	;
              	; ***************************************************************************************
              	
C086:         	CompileOne:
C086: 7E      			ld 		a,(hl) 						; get the word's colour.
C087: E6C0    			and 	$C0
C089: C8      			ret  	z 							; exit immediately if it's a comment word.
C08A: E5      			push 	hl 							; save HL on stack
              	
C08B: FEC0    			cp 		$C0 						; $40 and $80 , compile or execute, handled together
C08D: 2030    			jr 		nz,_COExecuteCompile
              			;
              			; 		Create a new definition using the word at HL.
              			;
C08F: 06FF    			ld 		b,$FF 						; we write it out backwards so go forward counting characters. We count the space so -1 here.
C091:         	_CDFindEnd:
C091: 04      			inc 	b 							; bump count
C092: 7E      			ld 		a,(hl) 						; get character		
C093: 23      			inc 	hl
C094: B7      			or 		a
C095: 2806    			jr 		z,_CDFoundEnd		 		; if zero, we're at the end
C097: E63F    			and 	$3F
C099: FE20    			cp 		$20
C09B: 20F4    			jr 		nz,_CDFindEnd
C09D:         	_CDFoundEnd:
              			;
              			; 		HL points one after the word end seperator, B is the count. C is the OR value for copying, which is only set 
              			; 		first time to $80
C09D: 0E80    			ld 		c,$80 						; the copy OR value
C09F: 2B      			dec 	hl 							; undo the get after getting the space.
C0A0:         	_CDCopyDictionary:
C0A0: 2B      			dec 	hl 							; get previous character. we are writing out backwards as we go down
C0A1: 7E      			ld 		a,(hl)
C0A2: E63F    			and 	$3F 						; colour dropped. (should be red)
C0A4: B1      			or 		c  							; OR C in, first time $80
C0A5: 0E00    			ld 		c,0 						; and next times it's only $00		
C0A7: CDC0C0  			call	CompileWriteDictionary 
C0AA: 10F4    			djnz 	_CDCopyDictionary 			; write out the whole word.
              			;
              			; 		Now create the rest of the record, the code address then type byte.
              			;
C0AC: 3A1FC0  			ld 		a,(CodeNextFree+1) 			; write out code MSB then LSB
C0AF: CDC0C0  			call	CompileWriteDictionary 
C0B2: 3A1EC0  			ld 		a,(CodeNextFree)
C0B5: CDC0C0  			call	CompileWriteDictionary 
C0B8: 3E80    			ld 		a,$80 						; then the default type byte
C0BA: CDC0C0  			call	CompileWriteDictionary 
C0BD: E1      			pop 	hl 							; restore HL and exit.
C0BE: C9      			ret
              	;
              	; 		Compile or execute the word at HL.
              	;
C0BF:         	_COExecuteCompile:
C0BF: 76      			halt
              	
              	
              	; ***************************************************************************************
              	;
              	; 						Write dictionary word out backwards
              	;
              	; ***************************************************************************************
              	
C0C0:         	CompileWriteDictionary:
C0C0: E5      			push 	hl
C0C1: 2A22C0  			ld 		hl,(DictionaryBase)
C0C4: 2B      			dec 	hl
C0C5: 77      			ld 		(hl),a
C0C6: 2222C0  			ld 		(DictionaryBase),hl
C0C9: E1      			pop 	hl
C0CA: C9      			ret
              		.include 	"search.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		find.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th October 2021
              	;		Purpose :	Search dictionary
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 		Search dictionary for word at HL, which is internal format (2+6 ended with 
              	;		(2+space or $00). On exit HL points to the type byte or $0000 if not found.
              	;
              	; ***************************************************************************************
              	
C0CB:         	SearchDictionary:
C0CB: C5      			push 	bc
C0CC: D5      			push 	de
C0CD: EB      			ex 		de,hl 						; put search string address in DE.
C0CE: 2A22C0  			ld 		hl,(DictionaryBase) 		; HL points to dictionary base.
              			;
              			; 		Compare entry at HL vs word at DE
              			;
C0D1:         	_SearchLoop:
C0D1: 44      			ld 		b,h 						; copy current being searched to BC
C0D2: 4D      			ld 		c,l 								
C0D3: 7E      			ld 		a,(hl) 						; get the type byte.
C0D4: B7      			or 	 	a 							; if zero, then fail as we've reached dictionary end.
C0D5: 2827    			jr 		z,_SDFail
              			;
C0D7: 23      			inc  	hl 							; point to the first character
C0D8: 23      			inc 	hl 							; e.g. skip type byte and call address.
C0D9: 23      			inc 	hl
C0DA: D5      			push 	de 							; save search string address on stack.
              			;
              			; 		Compare string at HL vs String at DE
              			;
C0DB:         	_SearchCompare:
C0DB: 1A      			ld 		a,(de) 						; calculate xor of two characters
C0DC: AE      			xor 	(hl) 						; as we're only interested in lower 6 bits for compare
C0DD: E63F    			and 	$3F 						; check lower 6 bits only.
C0DF: 2015    			jr 		nz,_SearchNext 				; different, go to next word.
C0E1: 7E      			ld 		a,(hl) 						; get dictionary byte successfully matched.
C0E2: 13      			inc 	de 							; advance to next.
C0E3: 23      			inc 	hl 		
C0E4: 87      			add 	a,a 						; is bit 7 in the last match, indicating the last character of the word in the dictionary ?
C0E5: 30F4    			jr 		nc,_SearchCompare 			; no, keep comparing
              			;
              			; 		Found the end of the word in the dictionary, HL points to the byte following, DE the character following.
              			;	 	We need to check it's the end of the word in the search text.
              			;
C0E7: 1A      			ld 		a,(de) 						; get the next character in the search word.
C0E8: D1      			pop 	de 							; having got the character, restore DE to original value.
C0E9: B7      			or 		a 							; is it $00 or xx10000 (any colour space)
C0EA: 2806    			jr 		z,_SDSucceed 				; if zero, we've found the word, end of buffer
C0EC: E63F    			and 	$3F 
C0EE: FE20    			cp 		$20
C0F0: 20DF    			jr 		nz,_SearchLoop 				; no it wasn't any Space so go round again. HL points to the next type byte already.
C0F2:         	_SDSucceed: 
C0F2: 60      			ld 		h,b 						; restore value saved in BC to HL, the type byte address of the found word.
C0F3: 69      			ld 		l,c  						; at the start, e.g. the address of the type byte.
C0F4: 180B    			jr 		_SDExit
              			;
              			; 		Names did not match. HL still points into the word.
              			;
C0F6:         	_SearchNext:
C0F6: 7E      			ld 		a,(hl) 						; get and bump in dictionary
C0F7: 23      			inc 	hl
C0F8: 87      			add 	a,a 						; looking for the bit 7 set indicating the end of the word
C0F9: 30FB    			jr 		nc,_SearchNext  			
C0FB: D1      			pop 	de 							; restore DE, the address of the input word
C0FC: 18D3    			jr 		_SearchLoop 				; and try the next dictionary word.
              	;
C0FE:         	_SDFail:									; not found, return zero
C0FE: 210000  			ld 		hl,$0000 					
C101:         	_SDExit:
C101: D1      			pop 	de
C102: C1      			pop 	bc		
C103: C9      			ret		
              	
              	
              		
              	
              	; ***************************************************************************************
              	;
              	; 							Autogenerated Vocabulary file
              	;
              	; ***************************************************************************************
              	
              		.include 	"vocabulary/vocabulary.asm"
              	; --------------------------------------
              	;             <
              	; --------------------------------------
C104:         	word_1000:
C104: CD45C0  		call	CompileCallFollowing
C107: 7C      	 ld   a,h           ; check if signs different.
C108: AA      	 xor  d
C109: 87      	 add  a,a          ; CS if different
C10A: 3004    	 jr   nc,__less_samesign
C10C: 7A      	 ld   a,d          ; different. set CS to sign of B
C10D: 87      	 add  a,a          ; if set (negative) B must be < A as A is +ve
C10E: 1805    	 jr   __less_returnc
C110:         	__less_samesign:
C110: D5      	 push  de           ; save DE
C111: EB      	 ex   de,hl          ; -1 if B < A
C112: ED52    	 sbc  hl,de          ; calculate B - A , hencs CS if < (Carry clear by add a,a)
C114: D1      	 pop  de           ; restore DE
C115:         	__less_returnc:
C115: 3E00    	 ld   a,0          ; A 0
C117: DE00    	 sbc  a,0          ; A $FF if CS.
C119: 6F      	 ld   l,a          ; put in HL
C11A: 67      	 ld   h,a
C11B: C9      	 ret
              	; --------------------------------------
              	;             =
              	; --------------------------------------
C11C:         	word_1001:
C11C: CD45C0  		call	CompileCallFollowing
C11F: 7C      	 ld   a,h          ; H = H ^ D
C120: AA      	 xor  d
C121: 67      	 ld   h,a
C122: 7D      	 ld   a,l          ; A = (L ^ E) | (H ^ D)
C123: AB      	 xor  e
C124: B4      	 or   h           ; if A == 0 they are the same.
C125: 210000  	 ld   hl,$0000         ; return 0 if different
C128: C0      	 ret  nz
C129: 2B      	 dec  hl           ; return -1
C12A: C9      	 ret
              	; --------------------------------------
              	;             -
              	; --------------------------------------
C12B:         	word_1002:
C12B: CD45C0  		call	CompileCallFollowing
C12E: D5      	 push  de           ; save DE
C12F: EB      	 ex   de,hl          ; HL = B, DE = A
C130: AF      	 xor  a            ; clear carry
C131: ED52    	 sbc  hl,de          ; calculate B-A
C133: D1      	 pop  de           ; restore DE
C134: C9      	 ret
              	; --------------------------------------
              	;             +
              	; --------------------------------------
C135:         	word_1003:
C135: CD38C0  		call	CopyFollowing
C138: 01      		.db	endcopy_1003 - $ - 1
C139: 19      	 add  hl,de
C13A:         	endcopy_1003:
              	; --------------------------------------
              	;             AND
              	; --------------------------------------
C13A:         	word_1004:
C13A: CD45C0  		call	CompileCallFollowing
C13D: 7C      	 ld   a,h
C13E: A2      	 and  d
C13F: 67      	 ld   h,a
C140: 7D      	 ld   a,l
C141: A3      	 and  e
C142: 6F      	 ld   l,a
C143: C9      	 ret
              	; --------------------------------------
              	;             OR
              	; --------------------------------------
C144:         	word_1005:
C144: CD45C0  		call	CompileCallFollowing
C147: 7C      	 ld   a,h
C148: B2      	 or   d
C149: 67      	 ld   h,a
C14A: 7D      	 ld   a,l
C14B: B3      	 or   e
C14C: 6F      	 ld   l,a
C14D: C9      	 ret
              	; --------------------------------------
              	;             XOR
              	; --------------------------------------
C14E:         	word_1006:
C14E: CD45C0  		call	CompileCallFollowing
C151: 7C      	 ld   a,h
C152: AA      	 xor  d
C153: 67      	 ld   h,a
C154: 7D      	 ld   a,l
C155: AB      	 xor  e
C156: 6F      	 ld   l,a
C157: C9      	 ret
              	; --------------------------------------
              	;             /
              	; --------------------------------------
C158:         	word_1007:
C158: CD45C0  		call	CompileCallFollowing
C15B: D5      	 push  de
C15C: CDE3C2  	 call  DIVDivideMod16
C15F: EB      	 ex   de,hl
C160: D1      	 pop  de
C161: C9      	 ret
              	; --------------------------------------
              	;             MOD
              	; --------------------------------------
C162:         	word_1008:
C162: CD45C0  		call	CompileCallFollowing
C165: D5      	 push  de
C166: CDE3C2  	 call  DIVDivideMod16
C169: D1      	 pop  de
C16A: C9      	 ret
              	; --------------------------------------
              	;             !
              	; --------------------------------------
C16B:         	word_1009:
C16B: CD38C0  		call	CopyFollowing
C16E: 04      		.db	endcopy_1009 - $ - 1
C16F: 73      	  ld   (hl),e
C170: 23      	  inc  hl
C171: 72      	  ld   (hl),d
C172: 2B      	  dec  hl
C173:         	endcopy_1009:
              	; --------------------------------------
              	;             @
              	; --------------------------------------
C173:         	word_1010:
C173: CD38C0  		call	CopyFollowing
C176: 04      		.db	endcopy_1010 - $ - 1
C177: 7E      	  ld   a,(hl)
C178: 23      	  inc  hl
C179: 66      	  ld  h,(hl)
C17A: 6F      	  ld  l,a
C17B:         	endcopy_1010:
              	; --------------------------------------
              	;             +!
              	; --------------------------------------
C17B:         	word_1011:
C17B: CD45C0  		call	CompileCallFollowing
C17E: 7E      	  ld   a,(hl)
C17F: 83      	  add  a,e
C180: 77      	  ld   (hl),a
C181: 23      	  inc  hl
C182: 7E      	  ld   a,(hl)
C183: 8A      	  adc  a,d
C184: 77      	  ld   (hl),a
C185: 2B      	  dec  hl
C186: C9      	  ret
              	; --------------------------------------
              	;             C!
              	; --------------------------------------
C187:         	word_1012:
C187: CD38C0  		call	CopyFollowing
C18A: 01      		.db	endcopy_1012 - $ - 1
C18B: 73      	  ld   (hl),e
C18C:         	endcopy_1012:
              	; --------------------------------------
              	;             C@
              	; --------------------------------------
C18C:         	word_1013:
C18C: CD38C0  		call	CopyFollowing
C18F: 03      		.db	endcopy_1013 - $ - 1
C190: 6E      	  ld   l,(hl)
C191: 2600    	  ld   h,0
C193:         	endcopy_1013:
              	; --------------------------------------
              	;             P@
              	; --------------------------------------
C193:         	word_1014:
C193: CD38C0  		call	CopyFollowing
C196: 04      		.db	endcopy_1014 - $ - 1
C197: ED68    	  in   l,(c)
C199: 2600    	  ld   h,0
C19B:         	endcopy_1014:
              	; --------------------------------------
              	;             P!
              	; --------------------------------------
C19B:         	word_1015:
C19B: CD38C0  		call	CopyFollowing
C19E: 02      		.db	endcopy_1015 - $ - 1
C19F: ED69    	  out  (c),l
C1A1:         	endcopy_1015:
              	; --------------------------------------
              	;             ,
              	; --------------------------------------
C1A1:         	word_1016:
C1A1: CD45C0  		call	CompileCallFollowing
C1A4: C34FC0  	  jp   CompileWord
              	; --------------------------------------
              	;             ;
              	; --------------------------------------
C1A7:         	word_1017:
C1A7: CD38C0  		call	CopyFollowing
C1AA: 01      		.db	endcopy_1017 - $ - 1
C1AB: C9      	  ret
C1AC:         	endcopy_1017:
              	; --------------------------------------
              	;             C,
              	; --------------------------------------
C1AC:         	word_1018:
C1AC: CD45C0  		call	CompileCallFollowing
C1AF: 7D      	  ld   a,l
C1B0: C35EC0  	  jp   CompileByte
              	; --------------------------------------
              	;             COPY
              	; --------------------------------------
C1B3:         	word_1019:
C1B3: CD45C0  		call	CompileCallFollowing
C1B6: 78      	  ld   a,b         ; exit if C = 0
C1B7: B1      	  or   c
C1B8: C8      	  ret  z
              	
C1B9: C5      	  push  bc          ; BC count
C1BA: D5      	  push  de          ; DE target
C1BB: E5      	  push  hl          ; HL source
              	
C1BC: AF      	  xor  a          ; Clear C
C1BD: ED52    	  sbc  hl,de         ; check overlap ?
C1BF: 300B    	  jr   nc,__copy_gt_count      ; if source after target
C1C1: 19      	  add  hl,de         ; undo subtract
              	
C1C2: 09      	  add  hl,bc         ; add count to HL + DE
C1C3: EB      	  ex   de,hl
C1C4: 09      	  add  hl,bc
C1C5: EB      	  ex   de,hl
C1C6: 1B      	  dec  de          ; dec them, so now at the last byte to copy
C1C7: 2B      	  dec  hl
C1C8: EDB8    	  lddr           ; do it backwards
C1CA: 1803    	  jr   __copy_exit
              	
C1CC:         	__copy_gt_count:
C1CC: 19      	  add  hl,de         ; undo subtract
C1CD: EDB0    	  ldir          ; do the copy
C1CF:         	__copy_exit:
C1CF: E1      	  pop  hl          ; restore registers
C1D0: D1      	  pop  de
C1D1: C1      	  pop  bc
C1D2: C9      	  ret
              	; --------------------------------------
              	;             FILL
              	; --------------------------------------
C1D3:         	word_1020:
C1D3: CD45C0  		call	CompileCallFollowing
C1D6: 78      	  ld   a,b         ; exit if C = 0
C1D7: B1      	  or   c
C1D8: C8      	  ret  z
              	
C1D9: C5      	  push  bc          ; BC count
C1DA: D5      	  push  de          ; DE target, L byte
C1DB:         	__fill_loop:
C1DB: 7D      	  ld   a,l         ; copy a byte
C1DC: 12      	  ld   (de),a
C1DD: 13      	  inc  de          ; bump pointer
C1DE: 0B      	  dec  bc          ; dec counter and loop
C1DF: 78      	  ld   a,b
C1E0: B1      	  or   c
C1E1: 20F8    	  jr   nz,__fill_loop
C1E3: D1      	  pop  de          ; restore
C1E4: C1      	  pop  bc
C1E5: C9      	  ret
              	; --------------------------------------
              	;             HALT
              	; --------------------------------------
C1E6:         	word_1021:
C1E6: CD45C0  		call	CompileCallFollowing
C1E9:         	__halt_loop:
C1E9: F3      	  di
C1EA: 76      	  halt
C1EB: 18FC    	  jr   __halt_loop
              	; --------------------------------------
              	;             BREAK
              	; --------------------------------------
C1ED:         	word_1022:
C1ED: CD38C0  		call	CopyFollowing
C1F0: 01      		.db	endcopy_1022 - $ - 1
C1F1: 76      	  db   $76
C1F2:         	endcopy_1022:
              	; --------------------------------------
              	;             *
              	; --------------------------------------
C1F2:         	word_1023:
C1F2: CD45C0  		call	CompileCallFollowing
C1F5: C30EC3  	 jp   MULTMultiply16
              	; --------------------------------------
              	;             SWAP
              	; --------------------------------------
C1F8:         	word_1024:
C1F8: CD38C0  		call	CopyFollowing
C1FB: 01      		.db	endcopy_1024 - $ - 1
C1FC: EB      	  ex   de,hl
C1FD:         	endcopy_1024:
              	; --------------------------------------
              	;             A>B
              	; --------------------------------------
C1FD:         	word_1025:
C1FD: CD38C0  		call	CopyFollowing
C200: 02      		.db	endcopy_1025 - $ - 1
C201: 54      	  ld   d,h
C202: 5D      	  ld   e,l
C203:         	endcopy_1025:
              	; --------------------------------------
              	;             A>C
              	; --------------------------------------
C203:         	word_1026:
C203: CD38C0  		call	CopyFollowing
C206: 02      		.db	endcopy_1026 - $ - 1
C207: 44      	  ld   b,h
C208: 4D      	  ld   c,l
C209:         	endcopy_1026:
              	; --------------------------------------
              	;             B>A
              	; --------------------------------------
C209:         	word_1027:
C209: CD38C0  		call	CopyFollowing
C20C: 02      		.db	endcopy_1027 - $ - 1
C20D: 62      	  ld   h,d
C20E: 6B      	  ld   l,e
C20F:         	endcopy_1027:
              	; --------------------------------------
              	;             B>C
              	; --------------------------------------
C20F:         	word_1028:
C20F: CD38C0  		call	CopyFollowing
C212: 02      		.db	endcopy_1028 - $ - 1
C213: 42      	  ld   b,d
C214: 4B      	  ld   c,e
C215:         	endcopy_1028:
              	; --------------------------------------
              	;             C>A
              	; --------------------------------------
C215:         	word_1029:
C215: CD38C0  		call	CopyFollowing
C218: 02      		.db	endcopy_1029 - $ - 1
C219: 60      	  ld   h,b
C21A: 69      	  ld   l,c
C21B:         	endcopy_1029:
              	; --------------------------------------
              	;             C>B
              	; --------------------------------------
C21B:         	word_1030:
C21B: CD38C0  		call	CopyFollowing
C21E: 02      		.db	endcopy_1030 - $ - 1
C21F: 50      	  ld   d,b
C220: 59      	  ld   e,c
C221:         	endcopy_1030:
              	; --------------------------------------
              	;             PUSH
              	; --------------------------------------
C221:         	word_1031:
C221: CD38C0  		call	CopyFollowing
C224: 01      		.db	endcopy_1031 - $ - 1
C225: E5      	 push  hl
C226:         	endcopy_1031:
              	; --------------------------------------
              	;             POP
              	; --------------------------------------
C226:         	word_1032:
C226: CD38C0  		call	CopyFollowing
C229: 02      		.db	endcopy_1032 - $ - 1
C22A: EB      	 ex   de,hl
C22B: E1      	 pop  hl
C22C:         	endcopy_1032:
              	; --------------------------------------
              	;             A>R
              	; --------------------------------------
C22C:         	word_1033:
C22C: CD38C0  		call	CopyFollowing
C22F: 01      		.db	endcopy_1033 - $ - 1
C230: E5      	 push  hl
C231:         	endcopy_1033:
              	; --------------------------------------
              	;             R>A
              	; --------------------------------------
C231:         	word_1034:
C231: CD38C0  		call	CopyFollowing
C234: 01      		.db	endcopy_1034 - $ - 1
C235: E1      	 pop  hl
C236:         	endcopy_1034:
              	; --------------------------------------
              	;             B>R
              	; --------------------------------------
C236:         	word_1035:
C236: CD38C0  		call	CopyFollowing
C239: 01      		.db	endcopy_1035 - $ - 1
C23A: D5      	 push  de
C23B:         	endcopy_1035:
              	; --------------------------------------
              	;             R>B
              	; --------------------------------------
C23B:         	word_1036:
C23B: CD38C0  		call	CopyFollowing
C23E: 01      		.db	endcopy_1036 - $ - 1
C23F: D1      	 pop  de
C240:         	endcopy_1036:
              	; --------------------------------------
              	;             C>R
              	; --------------------------------------
C240:         	word_1037:
C240: CD38C0  		call	CopyFollowing
C243: 01      		.db	endcopy_1037 - $ - 1
C244: C5      	 push  bc
C245:         	endcopy_1037:
              	; --------------------------------------
              	;             R>C
              	; --------------------------------------
C245:         	word_1038:
C245: CD38C0  		call	CopyFollowing
C248: 01      		.db	endcopy_1038 - $ - 1
C249: C1      	 pop  bc
C24A:         	endcopy_1038:
              	; --------------------------------------
              	;             AB>R
              	; --------------------------------------
C24A:         	word_1039:
C24A: CD38C0  		call	CopyFollowing
C24D: 02      		.db	endcopy_1039 - $ - 1
C24E: D5      	 push  de
C24F: E5      	 push  hl
C250:         	endcopy_1039:
              	; --------------------------------------
              	;             R>AB
              	; --------------------------------------
C250:         	word_1040:
C250: CD38C0  		call	CopyFollowing
C253: 02      		.db	endcopy_1040 - $ - 1
C254: E1      	 pop  hl
C255: D1      	 pop  de
C256:         	endcopy_1040:
              	; --------------------------------------
              	;             ABC>R
              	; --------------------------------------
C256:         	word_1041:
C256: CD38C0  		call	CopyFollowing
C259: 03      		.db	endcopy_1041 - $ - 1
C25A: C5      	 push  bc
C25B: D5      	 push  de
C25C: E5      	 push  hl
C25D:         	endcopy_1041:
              	; --------------------------------------
              	;             R>ABC
              	; --------------------------------------
C25D:         	word_1042:
C25D: CD38C0  		call	CopyFollowing
C260: 03      		.db	endcopy_1042 - $ - 1
C261: E1      	 pop  hl
C262: D1      	 pop  de
C263: C1      	 pop  bc
C264:         	endcopy_1042:
              	; --------------------------------------
              	;             --
              	; --------------------------------------
C264:         	word_1043:
C264: CD38C0  		call	CopyFollowing
C267: 01      		.db	endcopy_1043 - $ - 1
C268: 2B      	  dec  hl
C269:         	endcopy_1043:
              	; --------------------------------------
              	;             ---
              	; --------------------------------------
C269:         	word_1044:
C269: CD38C0  		call	CopyFollowing
C26C: 02      		.db	endcopy_1044 - $ - 1
C26D: 2B      	  dec  hl
C26E: 2B      	  dec  hl
C26F:         	endcopy_1044:
              	; --------------------------------------
              	;             ++
              	; --------------------------------------
C26F:         	word_1045:
C26F: CD38C0  		call	CopyFollowing
C272: 01      		.db	endcopy_1045 - $ - 1
C273: 23      	  inc  hl
C274:         	endcopy_1045:
              	; --------------------------------------
              	;             +++
              	; --------------------------------------
C274:         	word_1046:
C274: CD38C0  		call	CopyFollowing
C277: 02      		.db	endcopy_1046 - $ - 1
C278: 23      	  inc  hl
C279: 23      	  inc  hl
C27A:         	endcopy_1046:
              	; --------------------------------------
              	;             0-
              	; --------------------------------------
C27A:         	word_1047:
C27A: CD45C0  		call	CompileCallFollowing
C27D:         	__negate:
C27D: 7C      	  ld   a,h
C27E: 2F      	  cpl
C27F: 67      	  ld   h,a
C280: 7D      	  ld   a,l
C281: 2F      	  cpl
C282: 6F      	  ld   l,a
C283: 23      	  inc  hl
C284: C9      	  ret
              	; --------------------------------------
              	;             0<
              	; --------------------------------------
C285:         	word_1048:
C285: CD45C0  		call	CompileCallFollowing
C288: CB7C    	  bit  7,h
C28A: 210000  	  ld   hl,$0000
C28D: C8      	  ret  z
C28E: 2B      	  dec  hl
C28F: C9      	  ret
              	; --------------------------------------
              	;             0=
              	; --------------------------------------
C290:         	word_1049:
C290: CD45C0  		call	CompileCallFollowing
C293: 7C      	  ld   a,h
C294: B5      	  or   l
C295: 210000  	  ld   hl,$0000
C298: C0      	  ret  nz
C299: 2B      	  dec  hl
C29A: C9      	  ret
              	; --------------------------------------
              	;             2*
              	; --------------------------------------
C29B:         	word_1050:
C29B: CD38C0  		call	CopyFollowing
C29E: 01      		.db	endcopy_1050 - $ - 1
C29F: 29      	  add  hl,hl
C2A0:         	endcopy_1050:
              	; --------------------------------------
              	;             4*
              	; --------------------------------------
C2A0:         	word_1051:
C2A0: CD38C0  		call	CopyFollowing
C2A3: 02      		.db	endcopy_1051 - $ - 1
C2A4: 29      	  add  hl,hl
C2A5: 29      	  add  hl,hl
C2A6:         	endcopy_1051:
              	; --------------------------------------
              	;             8*
              	; --------------------------------------
C2A6:         	word_1052:
C2A6: CD38C0  		call	CopyFollowing
C2A9: 03      		.db	endcopy_1052 - $ - 1
C2AA: 29      	  add  hl,hl
C2AB: 29      	  add  hl,hl
C2AC: 29      	  add  hl,hl
C2AD:         	endcopy_1052:
              	; --------------------------------------
              	;             16*
              	; --------------------------------------
C2AD:         	word_1053:
C2AD: CD38C0  		call	CopyFollowing
C2B0: 04      		.db	endcopy_1053 - $ - 1
C2B1: 29      	  add  hl,hl
C2B2: 29      	  add  hl,hl
C2B3: 29      	  add  hl,hl
C2B4: 29      	  add  hl,hl
C2B5:         	endcopy_1053:
              	; --------------------------------------
              	;             2/
              	; --------------------------------------
C2B5:         	word_1054:
C2B5: CD38C0  		call	CopyFollowing
C2B8: 04      		.db	endcopy_1054 - $ - 1
C2B9: CB2C    	  sra  h
C2BB: CB1D    	  rr   l
C2BD:         	endcopy_1054:
              	; --------------------------------------
              	;             4/
              	; --------------------------------------
C2BD:         	word_1055:
C2BD: CD38C0  		call	CopyFollowing
C2C0: 08      		.db	endcopy_1055 - $ - 1
C2C1: CB2C    	  sra  h
C2C3: CB1D    	  rr   l
C2C5: CB2C    	  sra  h
C2C7: CB1D    	  rr   l
C2C9:         	endcopy_1055:
              	; --------------------------------------
              	;             ABS
              	; --------------------------------------
C2C9:         	word_1056:
C2C9: CD45C0  		call	CompileCallFollowing
C2CC: CB7C    	  bit  7,h
C2CE: C8      	  ret  z
C2CF: C37DC2  	  jp   __negate
              	; --------------------------------------
              	;             BSWAP
              	; --------------------------------------
C2D2:         	word_1057:
C2D2: CD38C0  		call	CopyFollowing
C2D5: 03      		.db	endcopy_1057 - $ - 1
C2D6: 7D      	  ld   a,l
C2D7: 6C      	  ld   l,h
C2D8: 67      	  ld   h,a
C2D9:         	endcopy_1057:
              	; --------------------------------------
              	;             NOT
              	; --------------------------------------
C2D9:         	word_1058:
C2D9: CD45C0  		call	CompileCallFollowing
C2DC: 7C      	  ld   a,h
C2DD: 2F      	  cpl
C2DE: 67      	  ld   h,a
C2DF: 7D      	  ld   a,l
C2E0: 2F      	  cpl
C2E1: 6F      	  ld   l,a
C2E2: C9      	  ret
              	
              	
              	
C2E3:         	DIVDivideMod16:
C2E3: C5      	 push  bc
C2E4: 42      	 ld   b,d     ; DE
C2E5: 4B      	 ld   c,e
C2E6: EB      	 ex   de,hl
C2E7: 210000  	 ld   hl,0
C2EA: 78      	 ld   a,b
C2EB: 0608    	 ld   b,8
C2ED:         	Div16_Loop1:
C2ED: 17      	 rla
C2EE: ED6A    	 adc  hl,hl
C2F0: ED52    	 sbc  hl,de
C2F2: 3001    	 jr   nc,Div16_NoAdd1
C2F4: 19      	 add  hl,de
C2F5:         	Div16_NoAdd1:
C2F5: 10F6    	 djnz  Div16_Loop1
C2F7: 17      	 rla
C2F8: 2F      	 cpl
C2F9: 47      	 ld   b,a
C2FA: 79      	 ld   a,c
C2FB: 48      	 ld   c,b
C2FC: 0608    	 ld   b,8
C2FE:         	Div16_Loop2:
C2FE: 17      	 rla
C2FF: ED6A    	 adc  hl,hl
C301: ED52    	 sbc  hl,de
C303: 3001    	 jr   nc,Div16_NoAdd2
C305: 19      	 add  hl,de
C306:         	Div16_NoAdd2:
C306: 10F6    	 djnz  Div16_Loop2
C308: 17      	 rla
C309: 2F      	 cpl
C30A: 51      	 ld   d,c
C30B: 5F      	 ld   e,a
C30C: C1      	 pop  bc
C30D: C9      	 ret
C30E:         	MULTMultiply16:
C30E: C5      	  push  bc
C30F: D5      	  push  de
C310: 44      	  ld   b,h        ; get multipliers in DE/BC
C311: 4D      	  ld   c,l
C312: 210000  	  ld   hl,0        ; zero total
C315:         	__Core__Mult_Loop:
C315: CB41    	  bit  0,c        ; lsb of shifter is non-zero
C317: 2801    	  jr   z,__Core__Mult_Shift
C319: 19      	  add  hl,de        ; add adder to total
C31A:         	__Core__Mult_Shift:
C31A: CB38    	  srl  b         ; shift BC right.
C31C: CB19    	  rr   c
C31E: EB      	  ex   de,hl        ; shift DE left
C31F: 29      	  add  hl,hl
C320: EB      	  ex   de,hl
C321: 78      	  ld   a,b        ; loop back if BC is nonzero
C322: B1      	  or   c
C323: 20F0    	  jr   nz,__Core__Mult_Loop
C325: D1      	  pop  de
C326: C1      	  pop  bc
C327: C9      	  ret
C328:         	FreeSpace:
              	
              	; ***************************************************************************************
              	;
              	;										ROM Header
              	;
              	; ***************************************************************************************
              	
C328: FFFFFFFF		.org	$E000
C32C: FF...   	
E000: 50535200		.db  	"PSR",0 						; 4 bytes filler.
E004: 009C00B0		.db  	0,$9C,0,$B0,0,$6C 				; 12 bytes ROM Identify
E008: 006C    	
E00A: 006400A8		.db 	0,$64,0,$A8,$5F,$70 			; the $5F makes the total $70 so $00 is output to scrambler
E00E: 5F70    	
              		.org 	$E010
E010: C300C0  		jp 		start 							; BIOS enters here.
              	
              	
E013:         	testCode:
              		.include "test/test.inc"
E013: D4C5D3D4		.db	$d4,$c5,$d3,$d4,$a0,$89,$8d,$8d,$85,$84,$89,$81,$94,$c5,$60,$43,$4f,$4d,$50,$49,$4c,$45,$44,$0
E017: A0898D8D	
E01B: 85848981	
E01F: 94C56043	
E023: 4F4D5049	
E027: 4C454400	
              	
              	
              	; ***************************************************************************************
              	;
              	; 				Load the Dictionary into High memory, it works down.
              	;
              	; ***************************************************************************************
              	
              		.include "vocabulary/dictionary.inc" 	; get length
014D:         	DictionarySize = 333
E02B: FFFFFFFF		.org 	CodeEnd-DictionarySize+1 		; set start pointer
E02F: FF...   	
FEB3:         	DictionaryInstalledBase:
              		.include "vocabulary/dictionary.asm" 	; pregenerated dictionary.
              	; <
FEB3: 81      		.db	$81
FEB4: 04C1    		.dw	word_1000
FEB6: BC      		.db	$bc
              	; =
FEB7: 81      		.db	$81
FEB8: 1CC1    		.dw	word_1001
FEBA: BD      		.db	$bd
              	; -
FEBB: 81      		.db	$81
FEBC: 2BC1    		.dw	word_1002
FEBE: AD      		.db	$ad
              	; +
FEBF: 81      		.db	$81
FEC0: 35C1    		.dw	word_1003
FEC2: AB      		.db	$ab
              	; AND
FEC3: 81      		.db	$81
FEC4: 3AC1    		.dw	word_1004
FEC6: 010E84  		.db	$1,$e,$84
              	; OR
FEC9: 81      		.db	$81
FECA: 44C1    		.dw	word_1005
FECC: 0F92    		.db	$f,$92
              	; XOR
FECE: 81      		.db	$81
FECF: 4EC1    		.dw	word_1006
FED1: 180F92  		.db	$18,$f,$92
              	; /
FED4: 81      		.db	$81
FED5: 58C1    		.dw	word_1007
FED7: AF      		.db	$af
              	; MOD
FED8: 81      		.db	$81
FED9: 62C1    		.dw	word_1008
FEDB: 0D0F84  		.db	$d,$f,$84
              	; !
FEDE: 81      		.db	$81
FEDF: 6BC1    		.dw	word_1009
FEE1: A1      		.db	$a1
              	; @
FEE2: 81      		.db	$81
FEE3: 73C1    		.dw	word_1010
FEE5: 80      		.db	$80
              	; +!
FEE6: 81      		.db	$81
FEE7: 7BC1    		.dw	word_1011
FEE9: 2BA1    		.db	$2b,$a1
              	; C!
FEEB: 81      		.db	$81
FEEC: 87C1    		.dw	word_1012
FEEE: 03A1    		.db	$3,$a1
              	; C@
FEF0: 81      		.db	$81
FEF1: 8CC1    		.dw	word_1013
FEF3: 0380    		.db	$3,$80
              	; P@
FEF5: 81      		.db	$81
FEF6: 93C1    		.dw	word_1014
FEF8: 1080    		.db	$10,$80
              	; P!
FEFA: 81      		.db	$81
FEFB: 9BC1    		.dw	word_1015
FEFD: 10A1    		.db	$10,$a1
              	; ,
FEFF: 81      		.db	$81
FF00: A1C1    		.dw	word_1016
FF02: AC      		.db	$ac
              	; ;
FF03: 80      		.db	$80
FF04: A7C1    		.dw	word_1017
FF06: BB      		.db	$bb
              	; C,
FF07: 81      		.db	$81
FF08: ACC1    		.dw	word_1018
FF0A: 03AC    		.db	$3,$ac
              	; COPY
FF0C: 81      		.db	$81
FF0D: B3C1    		.dw	word_1019
FF0F: 030F1099		.db	$3,$f,$10,$99
              	; FILL
FF13: 81      		.db	$81
FF14: D3C1    		.dw	word_1020
FF16: 06090C8C		.db	$6,$9,$c,$8c
              	; HALT
FF1A: 81      		.db	$81
FF1B: E6C1    		.dw	word_1021
FF1D: 08010C94		.db	$8,$1,$c,$94
              	; BREAK
FF21: 81      		.db	$81
FF22: EDC1    		.dw	word_1022
FF24: 02120501		.db	$2,$12,$5,$1,$8b
FF28: 8B      	
              	; *
FF29: 81      		.db	$81
FF2A: F2C1    		.dw	word_1023
FF2C: AA      		.db	$aa
              	; SWAP
FF2D: 81      		.db	$81
FF2E: F8C1    		.dw	word_1024
FF30: 13170190		.db	$13,$17,$1,$90
              	; A>B
FF34: 81      		.db	$81
FF35: FDC1    		.dw	word_1025
FF37: 013E82  		.db	$1,$3e,$82
              	; A>C
FF3A: 81      		.db	$81
FF3B: 03C2    		.dw	word_1026
FF3D: 013E83  		.db	$1,$3e,$83
              	; B>A
FF40: 81      		.db	$81
FF41: 09C2    		.dw	word_1027
FF43: 023E81  		.db	$2,$3e,$81
              	; B>C
FF46: 81      		.db	$81
FF47: 0FC2    		.dw	word_1028
FF49: 023E83  		.db	$2,$3e,$83
              	; C>A
FF4C: 81      		.db	$81
FF4D: 15C2    		.dw	word_1029
FF4F: 033E81  		.db	$3,$3e,$81
              	; C>B
FF52: 81      		.db	$81
FF53: 1BC2    		.dw	word_1030
FF55: 033E82  		.db	$3,$3e,$82
              	; PUSH
FF58: 80      		.db	$80
FF59: 21C2    		.dw	word_1031
FF5B: 10151388		.db	$10,$15,$13,$88
              	; POP
FF5F: 80      		.db	$80
FF60: 26C2    		.dw	word_1032
FF62: 100F90  		.db	$10,$f,$90
              	; A>R
FF65: 80      		.db	$80
FF66: 2CC2    		.dw	word_1033
FF68: 013E92  		.db	$1,$3e,$92
              	; R>A
FF6B: 80      		.db	$80
FF6C: 31C2    		.dw	word_1034
FF6E: 123E81  		.db	$12,$3e,$81
              	; B>R
FF71: 80      		.db	$80
FF72: 36C2    		.dw	word_1035
FF74: 023E92  		.db	$2,$3e,$92
              	; R>B
FF77: 80      		.db	$80
FF78: 3BC2    		.dw	word_1036
FF7A: 123E82  		.db	$12,$3e,$82
              	; C>R
FF7D: 80      		.db	$80
FF7E: 40C2    		.dw	word_1037
FF80: 033E92  		.db	$3,$3e,$92
              	; R>C
FF83: 80      		.db	$80
FF84: 45C2    		.dw	word_1038
FF86: 123E83  		.db	$12,$3e,$83
              	; AB>R
FF89: 80      		.db	$80
FF8A: 4AC2    		.dw	word_1039
FF8C: 01023E92		.db	$1,$2,$3e,$92
              	; R>AB
FF90: 80      		.db	$80
FF91: 50C2    		.dw	word_1040
FF93: 123E0182		.db	$12,$3e,$1,$82
              	; ABC>R
FF97: 80      		.db	$80
FF98: 56C2    		.dw	word_1041
FF9A: 0102033E		.db	$1,$2,$3,$3e,$92
FF9E: 92      	
              	; R>ABC
FF9F: 80      		.db	$80
FFA0: 5DC2    		.dw	word_1042
FFA2: 123E0102		.db	$12,$3e,$1,$2,$83
FFA6: 83      	
              	; --
FFA7: 81      		.db	$81
FFA8: 64C2    		.dw	word_1043
FFAA: 2DAD    		.db	$2d,$ad
              	; ---
FFAC: 81      		.db	$81
FFAD: 69C2    		.dw	word_1044
FFAF: 2D2DAD  		.db	$2d,$2d,$ad
              	; ++
FFB2: 81      		.db	$81
FFB3: 6FC2    		.dw	word_1045
FFB5: 2BAB    		.db	$2b,$ab
              	; +++
FFB7: 81      		.db	$81
FFB8: 74C2    		.dw	word_1046
FFBA: 2B2BAB  		.db	$2b,$2b,$ab
              	; 0-
FFBD: 81      		.db	$81
FFBE: 7AC2    		.dw	word_1047
FFC0: 30AD    		.db	$30,$ad
              	; 0<
FFC2: 81      		.db	$81
FFC3: 85C2    		.dw	word_1048
FFC5: 30BC    		.db	$30,$bc
              	; 0=
FFC7: 81      		.db	$81
FFC8: 90C2    		.dw	word_1049
FFCA: 30BD    		.db	$30,$bd
              	; 2*
FFCC: 81      		.db	$81
FFCD: 9BC2    		.dw	word_1050
FFCF: 32AA    		.db	$32,$aa
              	; 4*
FFD1: 81      		.db	$81
FFD2: A0C2    		.dw	word_1051
FFD4: 34AA    		.db	$34,$aa
              	; 8*
FFD6: 81      		.db	$81
FFD7: A6C2    		.dw	word_1052
FFD9: 38AA    		.db	$38,$aa
              	; 16*
FFDB: 81      		.db	$81
FFDC: ADC2    		.dw	word_1053
FFDE: 3136AA  		.db	$31,$36,$aa
              	; 2/
FFE1: 81      		.db	$81
FFE2: B5C2    		.dw	word_1054
FFE4: 32AF    		.db	$32,$af
              	; 4/
FFE6: 81      		.db	$81
FFE7: BDC2    		.dw	word_1055
FFE9: 34AF    		.db	$34,$af
              	; ABS
FFEB: 81      		.db	$81
FFEC: C9C2    		.dw	word_1056
FFEE: 010293  		.db	$1,$2,$93
              	; BSWAP
FFF1: 81      		.db	$81
FFF2: D2C2    		.dw	word_1057
FFF4: 02131701		.db	$2,$13,$17,$1,$90
FFF8: 90      	
              	; NOT
FFF9: 81      		.db	$81
FFFA: D9C2    		.dw	word_1058
FFFC: 0E0F94  		.db	$e,$f,$94
FFFF: 00      		.db	$00


total time: 0.0082 sec.
no errors
