              	; --------------------------------------
              	; zasm: assemble "m7.asm"
              	; date: 2021-10-17 07:45:04
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		m7.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th October 2021
              	;		Purpose :	M7 Main.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
C000:         	CodeStart = 0xC000
FFFF:         	CodeEnd = 0xFFFF
              	
C000:         		.org CodeStart
              	
              	; ***************************************************************************************
              	;
              	; 									  Code Header
              	;
              	; ***************************************************************************************
              	
C000:         	start: 								
C000: 2A0CC0  		ld 		hl,(StartAddress) 				; running from here
C003: E9      		jp 		(hl) 							
              	
C004:         	InformationBlock:
C004: 00C0    		.word 	start 							; +$00 base address of kernel
C006: 44C0    		.word 	InterfaceHandler 				; +$02 Interface routine
              	
              		.include "kernel/data.asm" 				; data area.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th October 2021
              	;		Purpose :	Data 
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	; ***************************************************************************************
              	;
              	;										Data Area
              	;
              	; ***************************************************************************************
              	
C008:         	DataArea:
              	;
              	; 		Initial Stack Pointer
              	;
C008:         	StackPointer:
C008: FF3F    		.dw 	$3FFF
              	;
              	; 		Next free code byte
              	;
C00A:         	CodeNextFree:
C00A: 8BC5    		.dw 	FreeSpace
              	;
              	; 		Execute address for startup
              	;
C00C:         	StartAddress:	
C00C: 29C0    		.dw 	Main
              	;
              	; 		Dictionary start (works down)
              	;
C00E:         	DictionaryBase:
C00E: 54FE    		.dw 	DictionaryInstalledBase
              	;
              	; 		Current state of the 3 registers
              	;
C010:         	RegA:
C010: 0000    		.dw 	$0000
C012:         	RegB:
C012: 0000    		.dw 	$0000
C014:         	RegC:
C014: 0000    		.dw 	$0000
              	;
              	; 		Current work trying to do
              	;
C016:         	CurrentWord:
C016: 0000    		.dw 	0
              	;
              	;		Buffer for error messages
              	;	
C018:         	ErrorBuffer:
C018: FFFFFFFF		.ds 	17
C01C: FF...   	
              		.include "kernel/kernel.asm"			; kernel code.	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		14th October 2021
              	;		Purpose :	Kernel Main Program
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 									Entry point
              	;
              	; ***************************************************************************************
              	
C029:         	Main:
C029: ED7B08C0			ld 		sp,(StackPointer)			; reset Stack Pointer
C02D: 2100E1  			ld 		hl,testCode
C030: CDAFC0  			call 	CompileStream
              	;
              	; 		Warm Start
              	;
C033:         	WarmStart:
C033: AF      			xor 	a
C034: 3218C0  			ld 		(ErrorBuffer),a
              	;
              	; 		Access the user interface
              	;
C037:         	Interface:		
C037: 2118C0  			ld 		hl,ErrorBuffer 				; point HL to Error Buffer
C03A: ED7B08C0			ld 		sp,(StackPointer)			; reset Stack Pointer
C03E: ED4B06C0			ld 		bc,(InformationBlock+2)
C042: C5      			push 	bc
C043: C9      			ret
              	;
              	; 		The default 'user interface'
              	;
C044:         	InterfaceHandler:		
C044: 11EEEE  			ld 		de,$EEEE
C047: 01EEEE  			ld 		bc,$EEEE
C04A: 76      			halt
C04B: 18F7    			jr 		InterfaceHandler
              	;
              	; 		Word cannot be executed error
              	;
C04D:         	WordIsCompileOnly:
C04D: 3E43    			ld 		a,'C'
C04F: 1802    			jr 		SetErrorBuffer
              	;
              	; 		Unknown word error
              	;
C051:         	UnknownWord:
C051: 3E3F    			ld 		a,'?'
              	;
              	; 		Report error, copy char to error buffer, then space, then current word.
              	;		
C053:         	SetErrorBuffer:
C053: 2118C0  			ld 		hl,ErrorBuffer
C056: 77      			ld 		(hl),a
C057: 23      			inc 	hl
C058: 3620    			ld 		(hl),' '
C05A: 23      			inc 	hl
C05B: ED5B16C0			ld 		de,(CurrentWord)
C05F:         	_SEBCopy:
C05F: 3600    			ld 		(hl),0
C061: 1A      			ld 		a,(de)
C062: B7      			or  	a
C063: 28D2    			jr 		z,Interface
C065: E63F    			and 	$3F
C067: FE20    			cp 		$20
C069: 28CC    			jr 		z,Interface
C06B: EE20    			xor 	$20
C06D: C620    			add 	$20
C06F: FE41    			cp 		'A'
C071: 3806    			jr 		c,_SEBNotAlpha
C073: FE5B    			cp 		'Z'+1
C075: 3002    			jr 		nc,_SEBNotAlpha
C077: C640    			add 	$40
C079:         	_SEBNotAlpha:
C079: 77      			ld 		(hl),a
C07A: 23      			inc 	hl
C07B: 13      			inc 	de
C07C: 18E1    			jr 		_SEBCopy		
              	
              			.include 	"code.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		code.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th October 2021
              	;		Purpose :	Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 		Copy the code following (length byte first) then pop to previous level.
              	;
              	; ***************************************************************************************
              	
C07E:         	CopyFollowing:
C07E: E3      			ex 		(sp),hl  			 		; old HL saved on stack, HL contains length pointer
C07F: C5      			push 	bc 							; save BC
C080: 46      			ld 		b,(hl) 						; get count to copy
C081:         	_CopyFollowing:
C081: 23      			inc 	hl 							; get next to copy
C082: 7E      			ld 		a,(hl)
C083: CDA4C0  			call 	CompileByte 				; and compile it.
C086: 10F9    			djnz 	_CopyFollowing 				; copy that many bytes.	
C088: C1      			pop 	bc 							; restore BC, HL
C089: E1      			pop 	hl 
C08A: C9      			ret 								; return to the previous level.
              	
              	; ***************************************************************************************
              	;
              	; 							Compile call to following code
              	;
              	; ***************************************************************************************
              	
C08B:         	CompileCallFollowing:
C08B: 3ECD    			ld 		a,$CD 						; CD is Z80 "CALL" 
C08D: CDA4C0  			call 	CompileByte
C090: E1      			pop 	hl 							; get address to compile call to
C091: CD95C0  			call 	CompileWord
C094: C9      			ret 								; return to the previous level.
              	
              	; ***************************************************************************************
              	;
              	;									Compile HL to Code Space
              	;
              	; ***************************************************************************************
              	
C095:         	CompileWord:
C095: EB      			ex 		de,hl 						; DE contains value
C096: E5      			push 	hl 							; save HL
C097: 2A0AC0  			ld 		hl,(CodeNextFree) 			; get code address
C09A: 73      			ld 		(hl),e 						; write out
C09B: 23      			inc 	hl 
C09C: 72      			ld 		(hl),d
C09D: 23      			inc 	hl
C09E: 220AC0  			ld 		(CodeNextFree),hl 			; update code address
C0A1: E1      			pop 	hl 							; restore HL, DE
C0A2: EB      			ex 		de,hl 							
C0A3: C9      			ret
              	
              	; ***************************************************************************************
              	;
              	;									Compile A to Code Space
              	;
              	; ***************************************************************************************
              	
C0A4:         	CompileByte:
C0A4: E5      			push 	hl 							; save HL, get code address
C0A5: 2A0AC0  			ld 		hl,(CodeNextFree)
C0A8: 77      			ld 		(hl),a  					; write out
C0A9: 23      			inc 	hl 							; bump & write back
C0AA: 220AC0  			ld 		(CodeNextFree),hl
C0AD: E1      			pop 	hl 	
C0AE: C9      			ret
              			.include 	"compiler.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th October 2021
              	;		Purpose :	Compile stream defining executing or compiling words 
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 	Compile stream at HL, executing, compiling or defining words according to their 
              	; 	colour. This is not re-entrant, as it exits to the warm start unless it goes to 
              	; 	compile something else.
              	;
              	; ***************************************************************************************
              	
C0AF:         	CompileStream:
C0AF: 7E      			ld 		a,(hl) 						; get next character
C0B0: B7      			or 		a 							; if zero, warm start as end of stream
C0B1: CA33C0  			jp 		z,WarmStart
C0B4: 23      			inc 	hl 							; increment in case it is space
C0B5: E63F    			and 	$3F 						; check it is a coloured space.
C0B7: FE20    			cp 		$20
C0B9: 28F4    			jr 		z,CompileStream 			; if so go back
C0BB: 2B      			dec 	hl 							; undo the get, so points to the non space non zero byte.
C0BC: CDCCC0  			call 	CompileOne 					; compile word at HL.
              			;
C0BF:         	_CSNext:		
C0BF: 7E      			ld 		a,(hl) 						; advance forward to next word
C0C0: B7      			or 		a 							; if found $00 end of stream go back to CompileStream
C0C1: 28EC    			jr 		z,CompileStream
C0C3: 23      			inc 	hl
C0C4: E63F    			and 	#$3F 						; check for colour space
C0C6: FE20    			cp 		$20
C0C8: 20F5    			jr 		nz,_CSNext
C0CA: 18E3    			jr 		CompileStream 				; once found, try the next word.
              	
              	; ***************************************************************************************
              	;
              	; 						  Compile/Execute/Define word at HL.
              	;
              	; ***************************************************************************************
              	
C0CC:         	CompileOne:
C0CC: 2216C0  			ld 		(CurrentWord),hl 			; useful for debugging.
C0CF: 7E      			ld 		a,(hl) 						; get the word's colour.
C0D0: E6C0    			and 	$C0
C0D2: C8      			ret  	z 							; exit immediately if it's a comment word.
C0D3: E5      			push 	hl 							; save HL on stack
              	
C0D4: FEC0    			cp 		$C0 						; $40 and $80 , compile or execute, handled together
C0D6: 203B    			jr 		nz,_COExecuteCompile
              			;
              			; 		Create a new definition using the word at HL.
              			;
C0D8: 06FF    			ld 		b,$FF 						; we write it out backwards so go forward counting characters. We count the space so -1 here.
C0DA:         	_CDFindEnd:
C0DA: 04      			inc 	b 							; bump count
C0DB: 7E      			ld 		a,(hl) 						; get character		
C0DC: 23      			inc 	hl
C0DD: B7      			or 		a
C0DE: 2806    			jr 		z,_CDFoundEnd		 		; if zero, we're at the end
C0E0: E63F    			and 	$3F
C0E2: FE20    			cp 		$20
C0E4: 20F4    			jr 		nz,_CDFindEnd
C0E6:         	_CDFoundEnd:
              			;
              			; 		HL points one after the word end seperator, B is the count. C is the OR value for copying, which is only set 
              			; 		first time to $80
C0E6: 0E80    			ld 		c,$80 						; the copy OR value
C0E8: 2B      			dec 	hl 							; undo the get after getting the space.
C0E9:         	_CDCopyDictionary:
C0E9: 2B      			dec 	hl 							; get previous character. we are writing out backwards as we go down
C0EA: 7E      			ld 		a,(hl)
C0EB: E63F    			and 	$3F 						; colour dropped. (should be red)
C0ED: B1      			or 		c  							; OR C in, first time $80
C0EE: 0E00    			ld 		c,0 						; and next times it's only $00		
C0F0: CDD4C1  			call	CompileWriteDictionary 
C0F3: 10F4    			djnz 	_CDCopyDictionary 			; write out the whole word.
              			;
              			; 		Now create the rest of the record, the code address then type byte.
              			;
C0F5: 3A0BC0  			ld 		a,(CodeNextFree+1) 			; write out code MSB then LSB
C0F8: CDD4C1  			call	CompileWriteDictionary 
C0FB: 3A0AC0  			ld 		a,(CodeNextFree)
C0FE: CDD4C1  			call	CompileWriteDictionary 
C101: 3E80    			ld 		a,$80 						; then the default type byte
C103: CDD4C1  			call	CompileWriteDictionary 
              	
C106: 3ECD    			ld 		a,$CD 						; compile CALL CompileCallFollowing into code, the default action.
C108: CDA4C0  			call 	CompileByte 				; e.g. the word compiles a call to whatever follows it.
C10B: 218BC0  			ld 		hl,CompileCallFollowing
C10E: CD95C0  			call 	CompileWord
              	
C111:         	_COPopHLExit:
C111: E1      			pop 	hl 							; restore HL and exit.
C112: C9      			ret
              	;
              	; 		Compile or execute the word at HL.
              	;
C113:         	_COExecuteCompile:
C113: E5      			push 	hl 							; save word text address
C114: CDF6C1  			call 	SearchDictionary 			; try to find it in the dictionary
C117: 7C      			ld 		a,h 						; was it found ?
C118: B5      			or 		l
C119: 284B    			jr 		z,_CECUnknown
              			;
              			; 		Word in the dictionary.
              			;
C11B: D1      			pop 	de 							; get word text back in DE
C11C: CB46    			bit 	0,(hl) 						; is this execute only ?
C11E: 2808    			jr 		z,_CECNotCompileOnly
C120: 1A      			ld 		a,(de)  					; what are we doing with it ?
C121: E6C0    			and 	$C0  						; get colour
C123: FE80    			cp 		$80  						; if execute ?
C125: CA4DC0  			jp 		z,WordIsCompileOnly 		; then we have an error.
C128:         	_CECNotCompileOnly:		
C128: 1A      			ld 		a,(de) 						; get the word colour and save on the stack
C129: E6C0    			and 	$C0
C12B: F5      			push	af
              	
C12C: ED5B0AC0			ld 		de,(CodeNextFree) 			; save the current code position on the stack.
C130: D5      			push 	de 
              	
C131: CD60C1  			call 	_COCallRoutine 				; call the routine to compile what it does.
              	
C134:         	_CEExecuteOrCompile:		
C134: E1      			pop 	hl 							; restore code position at start to HL.
C135: F1      			pop 	af 							; restore word colour.
              	
C136: FE80    			cp 	 	$80 						; if not execute
C138: 20D7    			jr 	 	nz,_COPopHLExit 			; then return, as we've done the compile
              	
C13A: 3EC9    			ld 		a,$C9 						; this is the Z80 RET which we need to compile after the code
C13C: CDA4C0  			call 	CompileByte
C13F: 220AC0  			ld 		(CodeNextFree),hl 			; reset the code pointer, as we don't want to keep this executed word.
              	
C142: 1153C1  			ld 		de,_CEXContinue 			; go here on return
C145: D5      			push 	de
C146: E5      			push 	hl 							; go here, the newly compiled code, first, this is for the RET below
              	
C147: 2A10C0  			ld 		hl,(RegA) 					; load registers
C14A: ED5B12C0			ld 		de,(RegB) 					
C14E: ED4B14C0			ld 		bc,(RegC) 					
              	
C152: C9      			ret 								; execute the code, as we pushed HL - not actually returning :)
              	
C153:         	_CEXContinue:
C153: 2210C0  			ld 		(RegA),hl 					; save the registers
C156: ED5312C0			ld 		(RegB),de
C15A: ED4314C0			ld 		(RegC),bc
              	
C15E: 18B1    			jr 		_COPopHLExit 				; pop HL and exit
              			;
              			; 		Call the routine to compile the code.
              			;
C160:         	_COCallRoutine:
C160: 23      			inc 	hl 							; call address into DE
C161: 5E      			ld 		e,(hl)
C162: 23      			inc 	hl
C163: 56      			ld 		d,(hl)
C164: EB      			ex 		de,hl 						; and go there
C165:         	_COCallHL:		
C165: E9      			jp 		(hl)
              			;
              			; 		Word not in the dictionary. Could be a constant or a string 
              			;
C166:         	_CECUnknown:		
C166: E1      			pop 	hl 							; restore word address.
C167: 7E      			ld 		a,(hl) 						; look at the first character
C168: E63F    			and 	$3F
C16A: FE22    			cp 		$22 						; is it a quote, indicating a string.
C16C: 2824    			jr 		z,_CSTRProcess 
              			;
              			; 		Now it must be a constant
              			;
C16E: 7E      			ld 		a,(hl) 						; push the colour on the stack
C16F: E6C0    			and 	$C0
C171: F5      			push 	af
C172: CD2FC2  			call 	StringToInteger 			; convert a word to a valid integer.
C175: 7A      			ld 		a,d 						; DE = 0 if fail.
C176: B3      			or 		e
C177: CA51C0  			jp 		z,UnknownWord 
              			;
C17A: F1      			pop 	af  
C17B: FE80    			cp 		$80 						; if execute, do execute constant.
C17D: 2805    			jr 		z,_CECExecuteConstant
              			;
              			; 		Compile a constant inline.
              			;
C17F:         	_CECCompileConstant:		
C17F: CDE8C1  			call 	CompileLoadConstant
C182: 188D    			jr 		_COPopHLExit 				; and exit
              			;
              			; 		Do the equivalent of executing a constant e.g. swap A & B n=>A
              			;
C184:         	_CECExecuteConstant:
C184: ED5B10C0			ld 		de,(RegA) 					; A -> B
C188: ED5312C0			ld 		(RegB),de
C18C: 2210C0  			ld 		(RegA),hl 					; constant -> HL
C18F: C311C1  			jp 		_COPopHLExit 				; and exit
              			;
              			; 		HL points to a string, prefixed by a ". Note, this is transient in execute mode.
              			;
C192:         	_CSTRProcess:
C192: 7E      			ld 		a,(hl) 						; push colour on stack
C193: E6C0    			and 	$C0
C195: F5      			push 	af
C196: ED5B0AC0			ld 		de,(CodeNextFree) 			; save the current code position on the stack.
C19A: D5      			push 	de 
              	
C19B: E5      			push 	hl 							; save string address
C19C: 3ECD    			ld 		a,$CD 						; compile CALL StringConstantHandler
C19E: CDA4C0  			call 	CompileByte 				
C1A1: 21DFC1  			ld 		hl,StringConstantHandler
C1A4: CD95C0  			call 	CompileWord
C1A7: E1      			pop 	hl
C1A8: 23      			inc 	hl 							; skip over the initial single quote
C1A9:         	_CSTRLoop:
C1A9: 7E      			ld 		a,(hl) 						; reached the end ? either 00 orr coloured space.
C1AA: B7      			or 		a
C1AB: 2820    			jr 		z,_CSTRDone
C1AD: E63F    			and 	$3F
C1AF: FE20    			cp 		$20
C1B1: 281A    			jr 		z,_CSTRDone		
C1B3: EE20    			xor 	$20 						; convert back to ASCII 7 bit.
C1B5: C620    			add 	$20
C1B7: FE41    			cp 		'A' 						; make lower case as default.
C1B9: 3806    			jr 		c,_CSTRNotAlpha
C1BB: FE5B    			cp 		'Z'+1
C1BD: 3002    			jr 		nc,_CSTRNotAlpha
C1BF: C620    			add 	$20
C1C1:         	_CSTRNotAlpha:		
C1C1: FE5F    			cp 		'_' 						; map _ to space
C1C3: 2002    			jr 		nz,_CSTRNotBar
C1C5: 3E20    			ld 		a,' '
C1C7:         	_CSTRNotBar:		
C1C7: CDA4C0  			call 	CompileByte  				; write out
C1CA: 23      			inc 	hl 							; next byte
C1CB: 18DC    			jr 		_CSTRLoop
C1CD:         	_CSTRDone:
C1CD: AF      			xor 	a 							; write $00 end of string
C1CE: CDA4C0  			call 	CompileByte
C1D1: C334C1  			jp 		_CEExecuteOrCompile 		; and go do it, perhaps.		
              	
              	; ***************************************************************************************
              	;
              	; 						Write dictionary word out working downwards
              	;
              	; ***************************************************************************************
              	
C1D4:         	CompileWriteDictionary:
C1D4: E5      			push 	hl
C1D5: 2A0EC0  			ld 		hl,(DictionaryBase) 		; hence pre-decrement address.
C1D8: 2B      			dec 	hl
C1D9: 77      			ld 		(hl),a
C1DA: 220EC0  			ld 		(DictionaryBase),hl
C1DD: E1      			pop 	hl
C1DE: C9      			ret
              	
              	; ***************************************************************************************
              	;
              	;					 Put in HL the ASCIIZ constant following
              	;
              	; ***************************************************************************************
              	
C1DF:         	StringConstantHandler:
C1DF: E1      			pop 	hl 							; get the return address into HL, leave on stack		
C1E0: E5      			push 	hl
C1E1:         	_SCHEnd: 									; advance HL past the string
C1E1: 7E      			ld 		a,(hl)
C1E2: 23      			inc 	hl
C1E3: B7      			or 		a
C1E4: 20FB    			jr 		nz,_SCHEnd		
C1E6: E3      			ex 		(sp),hl 					; swap them round, so HL = start and (SP) is the byte after
C1E7: C9      			ret
              	
              	; ***************************************************************************************
              	;
              	;						Compile code to load HL as a constant
              	;
              	; ***************************************************************************************
              	
C1E8:         	CompileLoadConstant:
C1E8: 3EEB    			ld 		a,$EB 						; compile EX DE,HL
C1EA: CDA4C0  			call 	CompileByte
C1ED: 3E21    			ld 		a,$21 						; LD HL,xxxxx
C1EF: CDA4C0  			call 	CompileByte
C1F2: CD95C0  			call 	CompileWord 				; compile the number to load
C1F5: C9      			ret
              			.include 	"search.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		find.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th October 2021
              	;		Purpose :	Search dictionary
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	; 		Search dictionary for word at HL, which is internal format (2+6 ended with 
              	;		(2+space or $00). On exit HL points to the type byte or $0000 if not found.
              	;
              	; ***************************************************************************************
              	
C1F6:         	SearchDictionary:
C1F6: C5      			push 	bc
C1F7: D5      			push 	de
C1F8: EB      			ex 		de,hl 						; put search string address in DE.
C1F9: 2A0EC0  			ld 		hl,(DictionaryBase) 		; HL points to dictionary base.
              			;
              			; 		Compare entry at HL vs word at DE
              			;
C1FC:         	_SearchLoop:
C1FC: 44      			ld 		b,h 						; copy current being searched to BC
C1FD: 4D      			ld 		c,l 								
C1FE: 7E      			ld 		a,(hl) 						; get the type byte.
C1FF: B7      			or 	 	a 							; if zero, then fail as we've reached dictionary end.
C200: 2827    			jr 		z,_SDFail
              			;
C202: 23      			inc  	hl 							; point to the first character
C203: 23      			inc 	hl 							; e.g. skip type byte and call address.
C204: 23      			inc 	hl
C205: D5      			push 	de 							; save search string address on stack.
              			;
              			; 		Compare string at HL vs String at DE
              			;
C206:         	_SearchCompare:
C206: 1A      			ld 		a,(de) 						; calculate xor of two characters
C207: AE      			xor 	(hl) 						; as we're only interested in lower 6 bits for compare
C208: E63F    			and 	$3F 						; check lower 6 bits only.
C20A: 2015    			jr 		nz,_SearchNext 				; different, go to next word.
C20C: 7E      			ld 		a,(hl) 						; get dictionary byte successfully matched.
C20D: 13      			inc 	de 							; advance to next.
C20E: 23      			inc 	hl 		
C20F: 87      			add 	a,a 						; is bit 7 in the last match, indicating the last character of the word in the dictionary ?
C210: 30F4    			jr 		nc,_SearchCompare 			; no, keep comparing
              			;
              			; 		Found the end of the word in the dictionary, HL points to the byte following, DE the character following.
              			;	 	We need to check it's the end of the word in the search text.
              			;
C212: 1A      			ld 		a,(de) 						; get the next character in the search word.
C213: D1      			pop 	de 							; having got the character, restore DE to original value.
C214: B7      			or 		a 							; is it $00 or xx10000 (any colour space)
C215: 2806    			jr 		z,_SDSucceed 				; if zero, we've found the word, end of buffer
C217: E63F    			and 	$3F 
C219: FE20    			cp 		$20
C21B: 20DF    			jr 		nz,_SearchLoop 				; no it wasn't any Space so go round again. HL points to the next type byte already.
C21D:         	_SDSucceed: 
C21D: 60      			ld 		h,b 						; restore value saved in BC to HL, the type byte address of the found word.
C21E: 69      			ld 		l,c  						; at the start, e.g. the address of the type byte.
C21F: 180B    			jr 		_SDExit
              			;
              			; 		Names did not match. HL still points into the word.
              			;
C221:         	_SearchNext:
C221: 7E      			ld 		a,(hl) 						; get and bump in dictionary
C222: 23      			inc 	hl
C223: 87      			add 	a,a 						; looking for the bit 7 set indicating the end of the word
C224: 30FB    			jr 		nc,_SearchNext  			
C226: D1      			pop 	de 							; restore DE, the address of the input word
C227: 18D3    			jr 		_SearchLoop 				; and try the next dictionary word.
              	;
C229:         	_SDFail:									; not found, return zero
C229: 210000  			ld 		hl,$0000 					
C22C:         	_SDExit:
C22C: D1      			pop 	de
C22D: C1      			pop 	bc		
C22E: C9      			ret		
              	
              	
              			.include 	"toint.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		toint.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th October 2021
              	;		Purpose :	Convert a word to an integer.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;		Convert word to integer. Can be decimal $hexadecimal and prefixed with '-'
              	;		Result in HL, DE is non-zero if successful.
              	;
              	; ***************************************************************************************
              	
C22F:         	StringToInteger:
C22F: 7E      			ld 		a,(hl) 						; check for - x
C230: E63F    			and 	$3F
C232: FE2D    			cp 		'-'
C234: 200C    			jr 		nz,_STOInt
C236: 23      			inc 	hl 							; skip the - sign. 
C237: CD42C2  			call 	_STOInt 					; try to convert to integer
              	
C23A: 7C      			ld 		a,h 						; negate the result.
C23B: 2F      			cpl 
C23C: 67      			ld 		h,a
C23D: 7D      			ld 		a,l
C23E: 2F      			cpl
C23F: 6F      			ld 		l,a
C240: 23      			inc 	hl
C241: C9      			ret
              	
C242: DDE5    	_STOInt:push 	ix 							; save IX
              			
              	
C244: E5      			push 	hl 							; copy word address to IX
C245: DDE1    			pop 	ix		
C247: 01000A  			ld 		bc,10*256 					; base in B, count in C
C24A: 210000  			ld 		hl,0 						; result in HL.
              			;
C24D: DD7E00  			ld 		a,(ix+0) 					; is first character a '$'
C250: E63F    			and 	$3F
C252: FE24    			cp 		'$'
C254: 2004    			jr 		nz,_STONotHex 
              			;
C256: 0610    			ld 		b,16 						; now Base 16.
C258: DD23    			inc 	ix 							; skip over the '$'
C25A:         	_STONotHex:
              			;
              			; 		Main processing loop.
              			;		
C25A:         	_STOLoop:
C25A: DD7E00  			ld 		a,(ix+0) 					; get character
C25D: DD23    			inc 	ix
C25F: B7      			or 		a  							; check for $00 or Coloured space
C260: 282F    			jr 		z,_STOEndWord 					
C262: E63F    			and 	$3F
C264: FE20    			cp 		$20
C266: 2829    			jr 		z,_STOEndWord
              			;
C268: FE3A    			cp 		'9'+1 						; if > 9 then fail
C26A: 3029    			jr 		nc,_STOFail
C26C: FE30    			cp 		'0'
C26E: 3009    			jr 		nc,_STOOkay
C270: FE07    			cp 		6+1 						; if > F then fail
C272: 3021    			jr 		nc,_STOFail
C274: B7      			or 		a
C275: 281E    			jr 		z,_STOFail 					; $00 is a fail too.
C277: C609    			add 	9 							; maps A ($01) to ($0A) etc.
C279:         	_STOOkay:
C279: 0C      			inc 	c 							; increment successful char count		
C27A: E60F    			and 	$0F 						; make digit in range 0..15
C27C: B8      			cp 		b 							; fail if >= the base
C27D: 3016    			jr 		nc,_STOFail
              			;
C27F: 29      			add 	hl,hl 						; HL = 2 * HL
C280: 5D      			ld 		e,l 						; DE = 2 * HL
C281: 54      			ld 		d,h		
C282: 29      			add 	hl,hl 						; HL = 4 * HL
C283: 29      			add 	hl,hl 						; HL = 8 * HL
C284: CB60    			bit 	4,b 						; is base 16 ?
C286: 2802    			jr 		z,_STONotHexMult
C288: 5D      			ld 		e,l 						; if base 16 HL = DE = 8 * HL
C289: 54      			ld 		d,h
C28A:         	_STONotHexMult:
C28A: 19      			add 	hl,de 						; so HL = HL * 10 or * 16 depending on B
C28B: 5F      			ld 		e,a 						; put digit in DE and add
C28C: 1600    			ld 		d,0
C28E: 19      			add 	hl,de
C28F: 18C9    			jr 		_STOLoop
              	;
C291:         	_STOEndWord:
C291: 59      			ld 		e,c 						; E is 0 if no chars, e.g. fail or #0 if chars consumed
C292: 51      			ld 		d,c 						; D the same
C293: 1806    			jr 		_STOExit 					; and exit
              	
C295:         	_STOFail:	 								; can't do it, return DE = HL = 0	
C295: 110000  			ld 		de,0
C298: 210000  			ld 		hl,0
C29B:         	_STOExit:		
C29B: DDE1    			pop 	ix 							; restore IX and exit
C29D: C9      			ret
              	
              			
              		
              	
              	; ***************************************************************************************
              	;
              	; 							Autogenerated Vocabulary file
              	;
              	; ***************************************************************************************
              	
              		.include 	"vocabulary/vocabulary.asm"
              	; --------------------------------------
              	;             <
              	; --------------------------------------
C29E:         	word_1000:
C29E: CD8BC0  		call	CompileCallFollowing
C2A1: 7C      	 ld   a,h           ; check if signs different.
C2A2: AA      	 xor  d
C2A3: 87      	 add  a,a          ; CS if different
C2A4: 3004    	 jr   nc,__less_samesign
C2A6: 7A      	 ld   a,d          ; different. set CS to sign of B
C2A7: 87      	 add  a,a          ; if set (negative) B must be < A as A is +ve
C2A8: 1805    	 jr   __less_returnc
C2AA:         	__less_samesign:
C2AA: D5      	 push  de           ; save DE
C2AB: EB      	 ex   de,hl          ; -1 if B < A
C2AC: ED52    	 sbc  hl,de          ; calculate B - A , hencs CS if < (Carry clear by add a,a)
C2AE: D1      	 pop  de           ; restore DE
C2AF:         	__less_returnc:
C2AF: 3E00    	 ld   a,0          ; A 0
C2B1: DE00    	 sbc  a,0          ; A $FF if CS.
C2B3: 6F      	 ld   l,a          ; put in HL
C2B4: 67      	 ld   h,a
C2B5: C9      	 ret
              	; --------------------------------------
              	;             =
              	; --------------------------------------
C2B6:         	word_1001:
C2B6: CD8BC0  		call	CompileCallFollowing
C2B9: 7C      	 ld   a,h          ; H = H ^ D
C2BA: AA      	 xor  d
C2BB: 67      	 ld   h,a
C2BC: 7D      	 ld   a,l          ; A = (L ^ E) | (H ^ D)
C2BD: AB      	 xor  e
C2BE: B4      	 or   h           ; if A == 0 they are the same.
C2BF: 210000  	 ld   hl,$0000         ; return 0 if different
C2C2: C0      	 ret  nz
C2C3: 2B      	 dec  hl           ; return -1
C2C4: C9      	 ret
              	; --------------------------------------
              	;             -
              	; --------------------------------------
C2C5:         	word_1002:
C2C5: CD8BC0  		call	CompileCallFollowing
C2C8: D5      	 push  de           ; save DE
C2C9: EB      	 ex   de,hl          ; HL = B, DE = A
C2CA: AF      	 xor  a            ; clear carry
C2CB: ED52    	 sbc  hl,de          ; calculate B-A
C2CD: D1      	 pop  de           ; restore DE
C2CE: C9      	 ret
              	; --------------------------------------
              	;             +
              	; --------------------------------------
C2CF:         	word_1003:
C2CF: CD7EC0  		call	CopyFollowing
C2D2: 01      		.db	endcopy_1003 - $ - 1
C2D3: 19      	 add  hl,de
C2D4:         	endcopy_1003:
              	; --------------------------------------
              	;             AND
              	; --------------------------------------
C2D4:         	word_1004:
C2D4: CD8BC0  		call	CompileCallFollowing
C2D7: 7C      	 ld   a,h
C2D8: A2      	 and  d
C2D9: 67      	 ld   h,a
C2DA: 7D      	 ld   a,l
C2DB: A3      	 and  e
C2DC: 6F      	 ld   l,a
C2DD: C9      	 ret
              	; --------------------------------------
              	;             OR
              	; --------------------------------------
C2DE:         	word_1005:
C2DE: CD8BC0  		call	CompileCallFollowing
C2E1: 7C      	 ld   a,h
C2E2: B2      	 or   d
C2E3: 67      	 ld   h,a
C2E4: 7D      	 ld   a,l
C2E5: B3      	 or   e
C2E6: 6F      	 ld   l,a
C2E7: C9      	 ret
              	; --------------------------------------
              	;             XOR
              	; --------------------------------------
C2E8:         	word_1006:
C2E8: CD8BC0  		call	CompileCallFollowing
C2EB: 7C      	 ld   a,h
C2EC: AA      	 xor  d
C2ED: 67      	 ld   h,a
C2EE: 7D      	 ld   a,l
C2EF: AB      	 xor  e
C2F0: 6F      	 ld   l,a
C2F1: C9      	 ret
              	; --------------------------------------
              	;             /
              	; --------------------------------------
C2F2:         	word_1007:
C2F2: CD8BC0  		call	CompileCallFollowing
C2F5: D5      	 push  de
C2F6: CD0EC5  	 call  DIVDivideMod16
C2F9: EB      	 ex   de,hl
C2FA: D1      	 pop  de
C2FB: C9      	 ret
              	; --------------------------------------
              	;             MOD
              	; --------------------------------------
C2FC:         	word_1008:
C2FC: CD8BC0  		call	CompileCallFollowing
C2FF: D5      	 push  de
C300: CD0EC5  	 call  DIVDivideMod16
C303: D1      	 pop  de
C304: C9      	 ret
              	; --------------------------------------
              	;             !
              	; --------------------------------------
C305:         	word_1009:
C305: CD7EC0  		call	CopyFollowing
C308: 04      		.db	endcopy_1009 - $ - 1
C309: 73      	  ld   (hl),e
C30A: 23      	  inc  hl
C30B: 72      	  ld   (hl),d
C30C: 2B      	  dec  hl
C30D:         	endcopy_1009:
              	; --------------------------------------
              	;             @
              	; --------------------------------------
C30D:         	word_1010:
C30D: CD7EC0  		call	CopyFollowing
C310: 04      		.db	endcopy_1010 - $ - 1
C311: 7E      	  ld   a,(hl)
C312: 23      	  inc  hl
C313: 66      	  ld  h,(hl)
C314: 6F      	  ld  l,a
C315:         	endcopy_1010:
              	; --------------------------------------
              	;             +!
              	; --------------------------------------
C315:         	word_1011:
C315: CD8BC0  		call	CompileCallFollowing
C318: 7E      	  ld   a,(hl)
C319: 83      	  add  a,e
C31A: 77      	  ld   (hl),a
C31B: 23      	  inc  hl
C31C: 7E      	  ld   a,(hl)
C31D: 8A      	  adc  a,d
C31E: 77      	  ld   (hl),a
C31F: 2B      	  dec  hl
C320: C9      	  ret
              	; --------------------------------------
              	;             C!
              	; --------------------------------------
C321:         	word_1012:
C321: CD7EC0  		call	CopyFollowing
C324: 01      		.db	endcopy_1012 - $ - 1
C325: 73      	  ld   (hl),e
C326:         	endcopy_1012:
              	; --------------------------------------
              	;             C@
              	; --------------------------------------
C326:         	word_1013:
C326: CD7EC0  		call	CopyFollowing
C329: 03      		.db	endcopy_1013 - $ - 1
C32A: 6E      	  ld   l,(hl)
C32B: 2600    	  ld   h,0
C32D:         	endcopy_1013:
              	; --------------------------------------
              	;             P@
              	; --------------------------------------
C32D:         	word_1014:
C32D: CD7EC0  		call	CopyFollowing
C330: 04      		.db	endcopy_1014 - $ - 1
C331: ED68    	  in   l,(c)
C333: 2600    	  ld   h,0
C335:         	endcopy_1014:
              	; --------------------------------------
              	;             P!
              	; --------------------------------------
C335:         	word_1015:
C335: CD7EC0  		call	CopyFollowing
C338: 02      		.db	endcopy_1015 - $ - 1
C339: ED69    	  out  (c),l
C33B:         	endcopy_1015:
              	; --------------------------------------
              	;             ,
              	; --------------------------------------
C33B:         	word_1016:
C33B: CD8BC0  		call	CompileCallFollowing
C33E: C395C0  	  jp   CompileWord
              	; --------------------------------------
              	;             ;
              	; --------------------------------------
C341:         	word_1017:
C341: 3EC9    	  ld   a,$C9         ; compile a RET
C343: CDA4C0  	  call  CompileByte
              	  ; TODO: Check close to $E000,  so we can skip the ROM header.
C346: C9      	  ret
              	; --------------------------------------
              	;             C,
              	; --------------------------------------
C347:         	word_1018:
C347: CD8BC0  		call	CompileCallFollowing
C34A: 7D      	  ld   a,l
C34B: C3A4C0  	  jp   CompileByte
              	; --------------------------------------
              	;             COPY
              	; --------------------------------------
C34E:         	word_1019:
C34E: CD8BC0  		call	CompileCallFollowing
C351: 78      	  ld   a,b         ; exit if C = 0
C352: B1      	  or   c
C353: C8      	  ret  z
              	
C354: C5      	  push  bc          ; BC count
C355: D5      	  push  de          ; DE target
C356: E5      	  push  hl          ; HL source
              	
C357: AF      	  xor  a          ; Clear C
C358: ED52    	  sbc  hl,de         ; check overlap ?
C35A: 300B    	  jr   nc,__copy_gt_count      ; if source after target
C35C: 19      	  add  hl,de         ; undo subtract
              	
C35D: 09      	  add  hl,bc         ; add count to HL + DE
C35E: EB      	  ex   de,hl
C35F: 09      	  add  hl,bc
C360: EB      	  ex   de,hl
C361: 1B      	  dec  de          ; dec them, so now at the last byte to copy
C362: 2B      	  dec  hl
C363: EDB8    	  lddr           ; do it backwards
C365: 1803    	  jr   __copy_exit
              	
C367:         	__copy_gt_count:
C367: 19      	  add  hl,de         ; undo subtract
C368: EDB0    	  ldir          ; do the copy
C36A:         	__copy_exit:
C36A: E1      	  pop  hl          ; restore registers
C36B: D1      	  pop  de
C36C: C1      	  pop  bc
C36D: C9      	  ret
              	; --------------------------------------
              	;             FILL
              	; --------------------------------------
C36E:         	word_1020:
C36E: CD8BC0  		call	CompileCallFollowing
C371: 78      	  ld   a,b         ; exit if C = 0
C372: B1      	  or   c
C373: C8      	  ret  z
              	
C374: C5      	  push  bc          ; BC count
C375: D5      	  push  de          ; DE target, L byte
C376:         	__fill_loop:
C376: 7D      	  ld   a,l         ; copy a byte
C377: 12      	  ld   (de),a
C378: 13      	  inc  de          ; bump pointer
C379: 0B      	  dec  bc          ; dec counter and loop
C37A: 78      	  ld   a,b
C37B: B1      	  or   c
C37C: 20F8    	  jr   nz,__fill_loop
C37E: D1      	  pop  de          ; restore
C37F: C1      	  pop  bc
C380: C9      	  ret
              	; --------------------------------------
              	;             HALT
              	; --------------------------------------
C381:         	word_1021:
C381: CD8BC0  		call	CompileCallFollowing
C384:         	__halt_loop:
C384: F3      	  di
C385: 76      	  halt
C386: 18FC    	  jr   __halt_loop
              	; --------------------------------------
              	;             BREAK
              	; --------------------------------------
C388:         	word_1022:
C388: CD7EC0  		call	CopyFollowing
C38B: 01      		.db	endcopy_1022 - $ - 1
C38C: 76      	  db   $76
C38D:         	endcopy_1022:
              	; --------------------------------------
              	;             *
              	; --------------------------------------
C38D:         	word_1023:
C38D: CD8BC0  		call	CompileCallFollowing
C390: C339C5  	 jp   MULTMultiply16
              	; --------------------------------------
              	;             SWAP
              	; --------------------------------------
C393:         	word_1024:
C393: CD7EC0  		call	CopyFollowing
C396: 01      		.db	endcopy_1024 - $ - 1
C397: EB      	  ex   de,hl
C398:         	endcopy_1024:
              	; --------------------------------------
              	;             A>B
              	; --------------------------------------
C398:         	word_1025:
C398: CD7EC0  		call	CopyFollowing
C39B: 02      		.db	endcopy_1025 - $ - 1
C39C: 54      	  ld   d,h
C39D: 5D      	  ld   e,l
C39E:         	endcopy_1025:
              	; --------------------------------------
              	;             A>C
              	; --------------------------------------
C39E:         	word_1026:
C39E: CD7EC0  		call	CopyFollowing
C3A1: 02      		.db	endcopy_1026 - $ - 1
C3A2: 44      	  ld   b,h
C3A3: 4D      	  ld   c,l
C3A4:         	endcopy_1026:
              	; --------------------------------------
              	;             B>A
              	; --------------------------------------
C3A4:         	word_1027:
C3A4: CD7EC0  		call	CopyFollowing
C3A7: 02      		.db	endcopy_1027 - $ - 1
C3A8: 62      	  ld   h,d
C3A9: 6B      	  ld   l,e
C3AA:         	endcopy_1027:
              	; --------------------------------------
              	;             B>C
              	; --------------------------------------
C3AA:         	word_1028:
C3AA: CD7EC0  		call	CopyFollowing
C3AD: 02      		.db	endcopy_1028 - $ - 1
C3AE: 42      	  ld   b,d
C3AF: 4B      	  ld   c,e
C3B0:         	endcopy_1028:
              	; --------------------------------------
              	;             C>A
              	; --------------------------------------
C3B0:         	word_1029:
C3B0: CD7EC0  		call	CopyFollowing
C3B3: 02      		.db	endcopy_1029 - $ - 1
C3B4: 60      	  ld   h,b
C3B5: 69      	  ld   l,c
C3B6:         	endcopy_1029:
              	; --------------------------------------
              	;             C>B
              	; --------------------------------------
C3B6:         	word_1030:
C3B6: CD7EC0  		call	CopyFollowing
C3B9: 02      		.db	endcopy_1030 - $ - 1
C3BA: 50      	  ld   d,b
C3BB: 59      	  ld   e,c
C3BC:         	endcopy_1030:
              	; --------------------------------------
              	;             PUSH
              	; --------------------------------------
C3BC:         	word_1031:
C3BC: CD7EC0  		call	CopyFollowing
C3BF: 01      		.db	endcopy_1031 - $ - 1
C3C0: E5      	 push  hl
C3C1:         	endcopy_1031:
              	; --------------------------------------
              	;             POP
              	; --------------------------------------
C3C1:         	word_1032:
C3C1: CD7EC0  		call	CopyFollowing
C3C4: 02      		.db	endcopy_1032 - $ - 1
C3C5: EB      	 ex   de,hl
C3C6: E1      	 pop  hl
C3C7:         	endcopy_1032:
              	; --------------------------------------
              	;             A>R
              	; --------------------------------------
C3C7:         	word_1033:
C3C7: CD7EC0  		call	CopyFollowing
C3CA: 01      		.db	endcopy_1033 - $ - 1
C3CB: E5      	 push  hl
C3CC:         	endcopy_1033:
              	; --------------------------------------
              	;             R>A
              	; --------------------------------------
C3CC:         	word_1034:
C3CC: CD7EC0  		call	CopyFollowing
C3CF: 01      		.db	endcopy_1034 - $ - 1
C3D0: E1      	 pop  hl
C3D1:         	endcopy_1034:
              	; --------------------------------------
              	;             B>R
              	; --------------------------------------
C3D1:         	word_1035:
C3D1: CD7EC0  		call	CopyFollowing
C3D4: 01      		.db	endcopy_1035 - $ - 1
C3D5: D5      	 push  de
C3D6:         	endcopy_1035:
              	; --------------------------------------
              	;             R>B
              	; --------------------------------------
C3D6:         	word_1036:
C3D6: CD7EC0  		call	CopyFollowing
C3D9: 01      		.db	endcopy_1036 - $ - 1
C3DA: D1      	 pop  de
C3DB:         	endcopy_1036:
              	; --------------------------------------
              	;             C>R
              	; --------------------------------------
C3DB:         	word_1037:
C3DB: CD7EC0  		call	CopyFollowing
C3DE: 01      		.db	endcopy_1037 - $ - 1
C3DF: C5      	 push  bc
C3E0:         	endcopy_1037:
              	; --------------------------------------
              	;             R>C
              	; --------------------------------------
C3E0:         	word_1038:
C3E0: CD7EC0  		call	CopyFollowing
C3E3: 01      		.db	endcopy_1038 - $ - 1
C3E4: C1      	 pop  bc
C3E5:         	endcopy_1038:
              	; --------------------------------------
              	;             AB>R
              	; --------------------------------------
C3E5:         	word_1039:
C3E5: CD7EC0  		call	CopyFollowing
C3E8: 02      		.db	endcopy_1039 - $ - 1
C3E9: D5      	 push  de
C3EA: E5      	 push  hl
C3EB:         	endcopy_1039:
              	; --------------------------------------
              	;             R>AB
              	; --------------------------------------
C3EB:         	word_1040:
C3EB: CD7EC0  		call	CopyFollowing
C3EE: 02      		.db	endcopy_1040 - $ - 1
C3EF: E1      	 pop  hl
C3F0: D1      	 pop  de
C3F1:         	endcopy_1040:
              	; --------------------------------------
              	;             ABC>R
              	; --------------------------------------
C3F1:         	word_1041:
C3F1: CD7EC0  		call	CopyFollowing
C3F4: 03      		.db	endcopy_1041 - $ - 1
C3F5: C5      	 push  bc
C3F6: D5      	 push  de
C3F7: E5      	 push  hl
C3F8:         	endcopy_1041:
              	; --------------------------------------
              	;             R>ABC
              	; --------------------------------------
C3F8:         	word_1042:
C3F8: CD7EC0  		call	CopyFollowing
C3FB: 03      		.db	endcopy_1042 - $ - 1
C3FC: E1      	 pop  hl
C3FD: D1      	 pop  de
C3FE: C1      	 pop  bc
C3FF:         	endcopy_1042:
              	; --------------------------------------
              	;             H
              	; --------------------------------------
C3FF:         	word_1043:
C3FF: CD7EC0  		call	CopyFollowing
C402: 04      		.db	endcopy_1043 - $ - 1
C403: EB      	  ex  de,hl
C404: 210AC0  	  ld  hl,CodeNextFree
C407:         	endcopy_1043:
              	; --------------------------------------
              	;             $SYSTEM
              	; --------------------------------------
C407:         	word_1044:
C407: CD7EC0  		call	CopyFollowing
C40A: 04      		.db	endcopy_1044 - $ - 1
C40B: EB      	  ex  de,hl
C40C: 2104C0  	  ld  hl,InformationBlock
C40F:         	endcopy_1044:
              	; --------------------------------------
              	;             WARM.START
              	; --------------------------------------
C40F:         	word_1045:
C40F: CD8BC0  		call	CompileCallFollowing
C412: C333C0  	  jp   WarmStart
              	; --------------------------------------
              	;             REPORT.ERROR
              	; --------------------------------------
C415:         	word_1046:
C415: CD8BC0  		call	CompileCallFollowing
C418: C337C0  	  jp   Interface
              	; --------------------------------------
              	;             CONSTANT
              	; --------------------------------------
C41B:         	word_1047:
C41B: 2A0AC0  	  ld   hl,(CodeNextFree)    ; fix up definition to remove call address.
C41E: 2B      	  dec  hl
C41F: 2B      	  dec  hl
C420: 220AC0  	  ld   (CodeNextFree),hl    ; keeping the CALL opcode.
              	  ;
C423: 2153C5  	  ld   hl,ConstantHandler    ; make it CALL ConstantHandler
C426: CD95C0  	  call  CompileWord
C429: 2A10C0  	  ld   hl,(RegA)     ; and put the word in after.
C42C: CD95C0  	  call  CompileWord
C42F: C9      	  ret
              	; --------------------------------------
              	;             VARIABLE
              	; --------------------------------------
C430:         	word_1048:
C430: 2A0AC0  	  ld   hl,(CodeNextFree)    ; fix up definition to remove call address.
C433: 2B      	  dec  hl
C434: 2B      	  dec  hl
C435: 220AC0  	  ld   (CodeNextFree),hl    ; keeping the CALL opcode.
              	  ;
C438: 2166C5  	  ld   hl,VariableHandler    ; make it CALL VariableHandler
C43B: CD95C0  	  call  CompileWord
C43E: 210000  	  ld   hl,$0000     ; initialise to zero.
C441: CD95C0  	  call  CompileWord
C444: C9      	  ret
              	; --------------------------------------
              	;             ARRAY
              	; --------------------------------------
C445:         	word_1049:
C445: 2A0AC0  	  ld   hl,(CodeNextFree)    ; fix up definition to remove call address.
C448: 2B      	  dec  hl
C449: 2B      	  dec  hl
C44A: 220AC0  	  ld   (CodeNextFree),hl    ; keeping the CALL opcode.
              	  ;
C44D: 2166C5  	  ld   hl,VariableHandler    ; make it CALL VariableHandler
C450: CD95C0  	  call  CompileWord
              	
C453: 2A10C0  	  ld   hl,(RegA)     ; initialise to zero.
C456:         	_MakeArray:
C456: 7C      	  ld   a,h
C457: B5      	  or   l
C458: C8      	  ret  z
C459: 2B      	  dec  hl
C45A: AF      	  xor  a
C45B: CDA4C0  	  call  CompileByte
C45E: 18F6    	  jr   _MakeArray
C460: C9      	  ret
              	; --------------------------------------
              	;             ADDRESS.OF
              	; --------------------------------------
C461:         	word_1050:
C461: D5      	  push  de
C462: E5      	  push  hl
C463: 2A0AC0  	  ld   hl,(CodeNextFree)    ; get previous code address
C466: 2B      	  dec  hl
C467: 56      	  ld   d,(hl)
C468: 2B      	  dec  hl
C469: 5E      	  ld   e,(hl)
C46A: 2B      	  dec  hl
C46B: 220AC0  	  ld   (CodeNextFree),hl    ; we've removed the word, address is in DE
C46E: EB      	  ex   de,hl
C46F: CDE8C1  	  call  CompileLoadConstant
C472: E1      	  pop  hl
C473: D1      	  pop  de
C474: C9      	  ret
              	; --------------------------------------
              	;             !!
              	; --------------------------------------
C475:         	word_1051:
C475: 2A0AC0  	  ld   hl,(CodeNextFree)    ; we save one byte.
C478: 2B      	  dec  hl
C479: 220AC0  	  ld   (CodeNextFree),hl
              	  ;
C47C: 46      	  ld   b,(hl)
C47D: 2B      	  dec  hl
C47E: 4E      	  ld   c,(hl)
C47F: 70      	  ld   (hl),b
C480: 2B      	  dec  hl
C481: 71      	  ld   (hl),c
C482: 2B      	  dec  hl
C483: 3622    	  ld   (hl),$22
C485: C9      	  ret
              	; --------------------------------------
              	;             @@
              	; --------------------------------------
C486:         	word_1052:
C486: 2A0AC0  	  ld   hl,(CodeNextFree)    ; we save one byte.
              	  ;
C489: 2B      	  dec  hl
C48A: 2B      	  dec  hl
C48B: 2B      	  dec  hl
C48C: 362A    	  ld   (hl),$2A
C48E: C9      	  ret
              	; --------------------------------------
              	;             ---
              	; --------------------------------------
C48F:         	word_1053:
C48F: CD7EC0  		call	CopyFollowing
C492: 02      		.db	endcopy_1053 - $ - 1
C493: 2B      	  dec  hl
C494: 2B      	  dec  hl
C495:         	endcopy_1053:
              	; --------------------------------------
              	;             --
              	; --------------------------------------
C495:         	word_1054:
C495: CD7EC0  		call	CopyFollowing
C498: 01      		.db	endcopy_1054 - $ - 1
C499: 2B      	  dec  hl
C49A:         	endcopy_1054:
              	; --------------------------------------
              	;             ++
              	; --------------------------------------
C49A:         	word_1055:
C49A: CD7EC0  		call	CopyFollowing
C49D: 01      		.db	endcopy_1055 - $ - 1
C49E: 23      	  inc  hl
C49F:         	endcopy_1055:
              	; --------------------------------------
              	;             +++
              	; --------------------------------------
C49F:         	word_1056:
C49F: CD7EC0  		call	CopyFollowing
C4A2: 02      		.db	endcopy_1056 - $ - 1
C4A3: 23      	  inc  hl
C4A4: 23      	  inc  hl
C4A5:         	endcopy_1056:
              	; --------------------------------------
              	;             0-
              	; --------------------------------------
C4A5:         	word_1057:
C4A5: CD8BC0  		call	CompileCallFollowing
C4A8:         	__negate:
C4A8: 7C      	  ld   a,h
C4A9: 2F      	  cpl
C4AA: 67      	  ld   h,a
C4AB: 7D      	  ld   a,l
C4AC: 2F      	  cpl
C4AD: 6F      	  ld   l,a
C4AE: 23      	  inc  hl
C4AF: C9      	  ret
              	; --------------------------------------
              	;             0<
              	; --------------------------------------
C4B0:         	word_1058:
C4B0: CD8BC0  		call	CompileCallFollowing
C4B3: CB7C    	  bit  7,h
C4B5: 210000  	  ld   hl,$0000
C4B8: C8      	  ret  z
C4B9: 2B      	  dec  hl
C4BA: C9      	  ret
              	; --------------------------------------
              	;             0=
              	; --------------------------------------
C4BB:         	word_1059:
C4BB: CD8BC0  		call	CompileCallFollowing
C4BE: 7C      	  ld   a,h
C4BF: B5      	  or   l
C4C0: 210000  	  ld   hl,$0000
C4C3: C0      	  ret  nz
C4C4: 2B      	  dec  hl
C4C5: C9      	  ret
              	; --------------------------------------
              	;             2*
              	; --------------------------------------
C4C6:         	word_1060:
C4C6: CD7EC0  		call	CopyFollowing
C4C9: 01      		.db	endcopy_1060 - $ - 1
C4CA: 29      	  add  hl,hl
C4CB:         	endcopy_1060:
              	; --------------------------------------
              	;             4*
              	; --------------------------------------
C4CB:         	word_1061:
C4CB: CD7EC0  		call	CopyFollowing
C4CE: 02      		.db	endcopy_1061 - $ - 1
C4CF: 29      	  add  hl,hl
C4D0: 29      	  add  hl,hl
C4D1:         	endcopy_1061:
              	; --------------------------------------
              	;             8*
              	; --------------------------------------
C4D1:         	word_1062:
C4D1: CD7EC0  		call	CopyFollowing
C4D4: 03      		.db	endcopy_1062 - $ - 1
C4D5: 29      	  add  hl,hl
C4D6: 29      	  add  hl,hl
C4D7: 29      	  add  hl,hl
C4D8:         	endcopy_1062:
              	; --------------------------------------
              	;             16*
              	; --------------------------------------
C4D8:         	word_1063:
C4D8: CD7EC0  		call	CopyFollowing
C4DB: 04      		.db	endcopy_1063 - $ - 1
C4DC: 29      	  add  hl,hl
C4DD: 29      	  add  hl,hl
C4DE: 29      	  add  hl,hl
C4DF: 29      	  add  hl,hl
C4E0:         	endcopy_1063:
              	; --------------------------------------
              	;             2/
              	; --------------------------------------
C4E0:         	word_1064:
C4E0: CD7EC0  		call	CopyFollowing
C4E3: 04      		.db	endcopy_1064 - $ - 1
C4E4: CB2C    	  sra  h
C4E6: CB1D    	  rr   l
C4E8:         	endcopy_1064:
              	; --------------------------------------
              	;             4/
              	; --------------------------------------
C4E8:         	word_1065:
C4E8: CD7EC0  		call	CopyFollowing
C4EB: 08      		.db	endcopy_1065 - $ - 1
C4EC: CB2C    	  sra  h
C4EE: CB1D    	  rr   l
C4F0: CB2C    	  sra  h
C4F2: CB1D    	  rr   l
C4F4:         	endcopy_1065:
              	; --------------------------------------
              	;             ABS
              	; --------------------------------------
C4F4:         	word_1066:
C4F4: CD8BC0  		call	CompileCallFollowing
C4F7: CB7C    	  bit  7,h
C4F9: C8      	  ret  z
C4FA: C3A8C4  	  jp   __negate
              	; --------------------------------------
              	;             BSWAP
              	; --------------------------------------
C4FD:         	word_1067:
C4FD: CD7EC0  		call	CopyFollowing
C500: 03      		.db	endcopy_1067 - $ - 1
C501: 7D      	  ld   a,l
C502: 6C      	  ld   l,h
C503: 67      	  ld   h,a
C504:         	endcopy_1067:
              	; --------------------------------------
              	;             NOT
              	; --------------------------------------
C504:         	word_1068:
C504: CD8BC0  		call	CompileCallFollowing
C507: 7C      	  ld   a,h
C508: 2F      	  cpl
C509: 67      	  ld   h,a
C50A: 7D      	  ld   a,l
C50B: 2F      	  cpl
C50C: 6F      	  ld   l,a
C50D: C9      	  ret
              	
              	
              	
C50E:         	DIVDivideMod16:
C50E: C5      	 push  bc
C50F: 42      	 ld   b,d     ; DE
C510: 4B      	 ld   c,e
C511: EB      	 ex   de,hl
C512: 210000  	 ld   hl,0
C515: 78      	 ld   a,b
C516: 0608    	 ld   b,8
C518:         	Div16_Loop1:
C518: 17      	 rla
C519: ED6A    	 adc  hl,hl
C51B: ED52    	 sbc  hl,de
C51D: 3001    	 jr   nc,Div16_NoAdd1
C51F: 19      	 add  hl,de
C520:         	Div16_NoAdd1:
C520: 10F6    	 djnz  Div16_Loop1
C522: 17      	 rla
C523: 2F      	 cpl
C524: 47      	 ld   b,a
C525: 79      	 ld   a,c
C526: 48      	 ld   c,b
C527: 0608    	 ld   b,8
C529:         	Div16_Loop2:
C529: 17      	 rla
C52A: ED6A    	 adc  hl,hl
C52C: ED52    	 sbc  hl,de
C52E: 3001    	 jr   nc,Div16_NoAdd2
C530: 19      	 add  hl,de
C531:         	Div16_NoAdd2:
C531: 10F6    	 djnz  Div16_Loop2
C533: 17      	 rla
C534: 2F      	 cpl
C535: 51      	 ld   d,c
C536: 5F      	 ld   e,a
C537: C1      	 pop  bc
C538: C9      	 ret
C539:         	MULTMultiply16:
C539: C5      	  push  bc
C53A: D5      	  push  de
C53B: 44      	  ld   b,h        ; get multipliers in DE/BC
C53C: 4D      	  ld   c,l
C53D: 210000  	  ld   hl,0        ; zero total
C540:         	__Core__Mult_Loop:
C540: CB41    	  bit  0,c        ; lsb of shifter is non-zero
C542: 2801    	  jr   z,__Core__Mult_Shift
C544: 19      	  add  hl,de        ; add adder to total
C545:         	__Core__Mult_Shift:
C545: CB38    	  srl  b         ; shift BC right.
C547: CB19    	  rr   c
C549: EB      	  ex   de,hl        ; shift DE left
C54A: 29      	  add  hl,hl
C54B: EB      	  ex   de,hl
C54C: 78      	  ld   a,b        ; loop back if BC is nonzero
C54D: B1      	  or   c
C54E: 20F0    	  jr   nz,__Core__Mult_Loop
C550: D1      	  pop  de
C551: C1      	  pop  bc
C552: C9      	  ret
C553:         	ConstantHandler:
C553: 3EEB    	  ld   a,0xEB       ; compile ex de,hl
C555: CDA4C0  	  call  CompileByte
C558: 3E21    	  ld   a,0x21       ; compile ld hl,
C55A: CDA4C0  	  call  CompileByte
C55D: E1      	  pop  hl        ; address of word to compile
C55E: 7E      	  ld   a,(hl)
C55F: 23      	  inc  hl
C560: 66      	  ld   h,(hl)
C561: 6F      	  ld   l,a
C562: CD95C0  	  call  CompileWord     ; compile that word.
C565: C9      	  ret
              	
              	
C566:         	VariableHandler:
C566: 3EEB    	  ld   a,0xEB       ; compile ex de,hl
C568: CDA4C0  	  call  CompileByte
C56B: 3E21    	  ld   a,0x21       ; compile ld hl,
C56D: CDA4C0  	  call  CompileByte
C570: E1      	  pop  hl        ; address of word to compile
C571: CD95C0  	  call  CompileWord     ; compile that word.
C574: C9      	  ret
              	
              	
C575:         	FixAccessCodeWrite:
C575: 3E2A    	  ld   a,0x2A       ; LD HL,(xxxx)
C577: 3002    	  jr   nc,_FACIsRead     ; use Carry to decide what to update
C579: 3E22    	  ld   a,0x22
C57B:         	_FACIsRead:
              	  ;
C57B: 2A0AC0  	  ld   hl,(CodeNextFree)    ; we save one byte.
C57E: 2B      	  dec  hl
C57F: 220AC0  	  ld   (CodeNextFree),hl
              	  ;
C582: 46      	  ld   b,(hl)
C583: 2B      	  dec  hl
C584: 4E      	  ld   c,(hl)
C585: 70      	  ld   (hl),b
C586: 2B      	  dec  hl
C587: 71      	  ld   (hl),c
C588: 2B      	  dec  hl
C589: 77      	  ld   (hl),a
C58A: C9      	  ret
C58B:         	FreeSpace:
              	
              	; ***************************************************************************************
              	;
              	;										ROM Header
              	;
              	; ***************************************************************************************
              	
C58B: FFFFFFFF		.org	$E000
C58F: FF...   	
E000: 50535200		.db  	"PSR",0 						; 4 bytes filler.
E004: 009C00B0		.db  	0,$9C,0,$B0,0,$6C 				; 12 bytes ROM Identify
E008: 006C    	
E00A: 006400A8		.db 	0,$64,0,$A8,$5F,$70 			; the $5F makes the total $70 so $00 is output to scrambler
E00E: 5F70    	
              		.org 	$E010
E010: C300C0  		jp 		start 							; BIOS enters here.
              	
              	
E013: FFFFFFFF		.org 	$E100
E017: FF...   	
E100:         	testCode:
E100: B1A0B4B0		.incbin "m7source.bin"
E104: B9B6A083	
E108: A1E0CDC1	
E10C: CBC5EEC9	
E110: CDCDC5C4	
E114: C9C1D4C5	
E118: 606D7360	
E11C: 48606B61	
E120: 607BE0C9	
E124: CDCDC5C4	
E128: C9C1D4C5	
E12C: A08D818B	
E130: 85AE898D	
E134: 8D858489	
E138: 81948560	
E13C: 4D414B45	
E140: 6E494D4D	
E144: 45444941	
E148: 5445607B	
E14C: E0DFD4C9	
E150: CDC5D3DF	
E154: CCCFCFD0	
E158: 60564152	
E15C: 4941424C	
E160: 45E0DFD2	
E164: C5D0C5C1	
E168: D4DFCCCF	
E16C: CFD06056	
E170: 41524941	
E174: 424C45E0	
E178: DFC9C6DF	
E17C: D0C1D4C3	
E180: C8605641	
E184: 52494142	
E188: 4C45E0D4	
E18C: C9CDC5D3	
E190: 60494D4D	
E194: 45444941	
E198: 54456048	
E19C: 60404060	
E1A0: 5F54494D	
E1A4: 45535F4C	
E1A8: 4F4F5060	
E1AC: 61616064	
E1B0: 72426043	
E1B4: 6C606445	
E1B8: 7560436C	
E1BC: 607BE0D4	
E1C0: C5CEC460	
E1C4: 494D4D45	
E1C8: 44494154	
E1CC: 45606445	
E1D0: 7160436C	
E1D4: 60647743	
E1D8: 60436C60	
E1DC: 64427560	
E1E0: 436C6064	
E1E4: 43726043	
E1E8: 6C605F54	
E1EC: 494D4553	
E1F0: 5F4C4F4F	
E1F4: 50604040	
E1F8: 606C607B	
E1FC: E0D2C5D0	
E200: C5C1D460	
E204: 494D4D45	
E208: 44494154	
E20C: 45604860	
E210: 4040605F	
E214: 52455045	
E218: 41545F4C	
E21C: 4F4F5060	
E220: 6161607B	
E224: E0D5CED4	
E228: C9CC6049	
E22C: 4D4D4544	
E230: 49415445	
E234: 60647743	
E238: 60436C60	
E23C: 64427560	
E240: 436C6064	
E244: 43416043	
E248: 6C605F52	
E24C: 45504541	
E250: 545F4C4F	
E254: 4F506040	
E258: 40606C60	
E25C: 7BE0C6CF	
E260: D2C5D6C5	
E264: D260494D	
E268: 4D454449	
E26C: 41544560	
E270: 64437360	
E274: 436C605F	
E278: 52455045	
E27C: 41545F4C	
E280: 4F4F5060	
E284: 4040606C	
E288: 607BE0C9	
E28C: C660494D	
E290: 4D454449	
E294: 41544560	
E298: 64774360	
E29C: 436C6064	
E2A0: 42756043	
E2A4: 6C606443	
E2A8: 4160436C	
E2AC: 60486040	
E2B0: 40605F49	
E2B4: 465F5041	
E2B8: 54434860	
E2BC: 61616070	
E2C0: 606C607B	
E2C4: E0EDC9C6	
E2C8: 60494D4D	
E2CC: 45444941	
E2D0: 54456064	
E2D4: 43426043	
E2D8: 6C606477	
E2DC: 4360436C	
E2E0: 60644341	
E2E4: 60436C60	
E2E8: 48604040	
E2EC: 605F4946	
E2F0: 5F504154	
E2F4: 43486061	
E2F8: 61607060	
E2FC: 6C607BE0	
E300: C5CCD3C5	
E304: 60494D4D	
E308: 45444941	
E30C: 54456048	
E310: 60404060	
E314: 73606B60	
E318: 5F49465F	
E31C: 50415443	
E320: 48604040	
E324: 60616064	
E328: 43736043	
E32C: 6C604860	
E330: 4040605F	
E334: 49465F50	
E338: 41544348	
E33C: 60616160	
E340: 70606C60	
E344: 7BE0D4C8	
E348: C5CE6049	
E34C: 4D4D4544	
E350: 49415445	
E354: 60486040	
E358: 40605F49	
E35C: 465F5041	
E360: 54434860	
E364: 40406061	
E368: 607BE0C3	
E36C: CFCEEED0	
E370: CFD36056	
E374: 41524941	
E378: 424C45E0	
E37C: C3CFCEEE	
E380: D8605641	
E384: 52494142	
E388: 4C45E0C3	
E38C: CFCEEED9	
E390: 60564152	
E394: 4941424C	
E398: 45E0C3CF	
E39C: CEEEC3CF	
E3A0: CCCFD5D2	
E3A4: 60564152	
E3A8: 4941424C	
E3AC: 45A0A4B2	
E3B0: B0A0838F	
E3B4: 8EAE838F	
E3B8: 8C8F9592	
E3BC: A0A1E0C3	
E3C0: CFCEEEC8	
E3C4: CFCDC560	
E3C8: 41427E52	
E3CC: 60706043	
E3D0: 4F4E6E58	
E3D4: 60616160	
E3D8: 7060434F	
E3DC: 4E6E5960	
E3E0: 61616064	
E3E4: 73707278	
E3E8: 60434F4E	
E3EC: 6E504F53	
E3F0: 60616160	
E3F4: 527E4142	
E3F8: 607BE0C3	
E3FC: CFCEEEC9	
E400: CECB6041	
E404: 427E5260	
E408: 71756041	
E40C: 4E446041	
E410: 7E526043	
E414: 4F4E6E43	
E418: 4F4C4F55	
E41C: 52604040	
E420: 60647046	
E424: 60414E44	
E428: 60434F4E	
E42C: 6E434F4C	
E430: 4F555260	
E434: 61616052	
E438: 7E416071	
E43C: 766A6043	
E440: 4F4E6E43	
E444: 4F4C4F55	
E448: 52606B61	
E44C: 60527E41	
E450: 42607BE0	
E454: C3CFCEEE	
E458: D0C1D0C5	
E45C: D2604142	
E460: 7E526071	
E464: 7560414E	
E468: 4460417E	
E46C: 5260434F	
E470: 4E6E434F	
E474: 4C4F5552	
E478: 60404060	
E47C: 64467060	
E480: 414E4460	
E484: 434F4E6E	
E488: 434F4C4F	
E48C: 55526061	
E490: 6160527E	
E494: 4160434F	
E498: 4E6E434F	
E49C: 4C4F5552	
E4A0: 606B6160	
E4A4: 527E4142	
E4A8: 607BE0C3	
E4AC: CFCEEEC3	
E4B0: CCC5C1D2	
E4B4: 60414243	
E4B8: 7E526043	
E4BC: 4F4E6E48	
E4C0: 4F4D4560	
E4C4: 71707274	
E4C8: 60417E43	
E4CC: 60647370	
E4D0: 70706064	
E4D4: 72706046	
E4D8: 494C4C60	
E4DC: 64737470	
E4E0: 7060434F	
E4E4: 4E6E434F	
E4E8: 4C4F5552	
E4EC: 60404060	
E4F0: 46494C4C	
E4F4: 60527E41	
E4F8: 4243607B	
E4FC: E0DFC3CF	
E500: CEEED3C3	
E504: D2CFCCCC	
E508: 60717960	
E50C: 7470606A	
E510: 60417E43	
E514: 60647370	
E518: 72786064	
E51C: 73707570	
E520: 60434F50	
E524: 59606473	
E528: 74727860	
E52C: 64737475	
E530: 7060434F	
E534: 50596074	
E538: 7060417E	
E53C: 43606473	
E540: 73727060	
E544: 64727060	
E548: 46494C4C	
E54C: 60647377	
E550: 72706043	
E554: 4F4E6E43	
E558: 4F4C4F55	
E55C: 52604040	
E560: 6046494C	
E564: 4C606D71	
E568: 60434F4E	
E56C: 6E59606B	
E570: 61606D74	
E574: 7060434F	
E578: 4E6E504F	
E57C: 53606B61	
E580: 607BE0DF	
E584: C3CFCEEE	
E588: C4CFD7CE	
E58C: 60716043	
E590: 4F4E6E59	
E594: 606B6160	
E598: 7060434F	
E59C: 4E6E5860	
E5A0: 61616043	
E5A4: 4F4E6E59	
E5A8: 60404060	
E5AC: 7270607D	
E5B0: 60494660	
E5B4: 5F434F4E	
E5B8: 6E534352	
E5BC: 4F4C4C60	
E5C0: 5448454E	
E5C4: 607B607B	
E5C8: E0DFC3CF	
E5CC: CEEEC5CD	
E5D0: C9D46043	
E5D4: 4F4E6E50	
E5D8: 4F536040	
E5DC: 60436160	
E5E0: 434F4E6E	
E5E4: 504F5360	
E5E8: 40406071	
E5EC: 70727460	
E5F0: 6B60434F	
E5F4: 4E6E434F	
E5F8: 4C4F5552	
E5FC: 60404060	
E600: 53574150	
E604: 60436160	
E608: 7160434F	
E60C: 4E6E504F	
E610: 53606B61	
E614: 60716043	
E618: 4F4E6E58	
E61C: 606B6160	
E620: 434F4E6E	
E624: 58604040	
E628: 60747060	
E62C: 7D604946	
E630: 605F434F	
E634: 4E6E444F	
E638: 574E6054	
E63C: 48454E60	
E640: 7BE0C3CF	
E644: CEEEC3D2	
E648: 60414243	
E64C: 7E526052	
E650: 45504541	
E654: 54607372	
E658: 605F434F	
E65C: 4E6E454D	
E660: 49546043	
E664: 4F4E6E58	
E668: 60404060	
E66C: 707D6055	
E670: 4E54494C	
E674: 60527E41	
E678: 4243607B	
E67C: E0C3CFCE	
E680: EEC5CDC9	
E684: D4604142	
E688: 437E5260	
E68C: 417E5260	
E690: 7173607D	
E694: 60494660	
E698: 527E4160	
E69C: 434F4E6E	
E6A0: 43526045	
E6A4: 4C534560	
E6A8: 527E4160	
E6AC: 5F434F4E	
E6B0: 6E454D49	
E6B4: 54605448	
E6B8: 454E6052	
E6BC: 7E414243	
E6C0: 607BE0C3	
E6C4: CFCEEED0	
E6C8: D2C9CED4	
E6CC: 6041427E	
E6D0: 52605245	
E6D4: 50454154	
E6D8: 60417E42	
E6DC: 60434060	
E6E0: 49466043	
E6E4: 4F4E6E45	
E6E8: 4D495460	
E6EC: 454C5345	
E6F0: 60527E41	
E6F4: 42607B60	
E6F8: 5448454E	
E6FC: 60427E41	
E700: 606B6B60	
E704: 464F5245	
E708: 56455260	
E70C: 7BE0C3CF	
E710: CEEECDCF	
E714: D6C56041	
E718: 427E5260	
E71C: 427E5260	
E720: 434F4E6E	
E724: 59606161	
E728: 60527E41	
E72C: 60434F4E	
E730: 6E586061	
E734: 6160434F	
E738: 4E6E5960	
E73C: 40406074	
E740: 70606A60	
E744: 434F4E6E	
E748: 58604040	
E74C: 606B6064	
E750: 73707278	
E754: 606B6043	
E758: 4F4E6E50	
E75C: 4F536061	
E760: 6160527E	
E764: 4142607B	
E768: E0C3CFCE	
E76C: EEC9CECB	
E770: C5D9A0A4	
E774: 8384A083	
E778: ACA0A4B1	
E77C: 8581B2A0	
E780: ACA0A4B6	
E784: 86A083AC	
E788: A0A4B2B6	
E78C: A083ACA0	
E790: A4B0B0A0	
E794: 83AC607B	
E798: E0C3CFCE	
E79C: EEC7C5D4	
E7A0: 60524550	
E7A4: 45415460	
E7A8: 434F4E6E	
E7AC: 494E4B45	
E7B0: 5960554E	
E7B4: 54494C60	
E7B8: 7BE0D4C5	
E7BC: D3D46054	
E7C0: 45535460	
E7C4: 41444452	
E7C8: 4553536E	
E7CC: 4F466074	
E7D0: 7260434F	
E7D4: 4E6E454D	
E7D8: 49546070	
E7DC: 60434F4E	
E7E0: 6E504150	
E7E4: 45526074	
E7E8: 7360434F	
E7EC: 4E6E454D	
E7F0: 49546071	
E7F4: 7360434F	
E7F8: 4E6E454D	
E7FC: 49546074	
E800: 7460434F	
E804: 4E6E454D	
E808: 49546043	
E80C: 4F4E6E43	
E810: 52607160	
E814: 434F4E6E	
E818: 494E4B60	
E81C: 6248454C	
E820: 4C4F5F57	
E824: 4F524C44	
E828: 60434F4E	
E82C: 6E505249	
E830: 4E546071	
E834: 7360434F	
E838: 4E6E454D	
E83C: 49546074	
E840: 7260434F	
E844: 4E6E454D	
E848: 49546071	
E84C: 71757674	
E850: 6054494D	
E854: 45536041	
E858: 7E526071	
E85C: 75604D4F	
E860: 44606B6B	
E864: 60434F4E	
E868: 6E494E4B	
E86C: 60527E41	
E870: 60727575	
E874: 60414E44	
E878: 60434F4E	
E87C: 6E454D49	
E880: 54605445	
E884: 4E446072	
E888: 72607660	
E88C: 434F4E6E	
E890: 4D4F5645	
E894: 60767460	
E898: 434F4E6E	
E89C: 454D4954	
E8A0: 607BA083	
E8A4: 8F8EAE83	
E8A8: 8C858192	
E8AC: A0B0A0B4	
E8B0: B0B9B6A0	
E8B4: 83A1A094	
E8B8: 85939400	
              	
              	; ***************************************************************************************
              	;
              	; 				Load the Dictionary into High memory, it works down.
              	;
              	; ***************************************************************************************
              	
              		.include "vocabulary/dictionary.inc" 	; get length
01AC:         	DictionarySize = 428
E8BC: FFFFFFFF		.org 	CodeEnd-DictionarySize+1 		; set start pointer
E8C0: FF...   	
FE54:         	DictionaryInstalledBase:
              		.include "vocabulary/dictionary.asm" 	; pregenerated dictionary.
              	; <
FE54: 80      		.db	$80
FE55: 9EC2    		.dw	word_1000
FE57: BC      		.db	$bc
              	; =
FE58: 80      		.db	$80
FE59: B6C2    		.dw	word_1001
FE5B: BD      		.db	$bd
              	; -
FE5C: 80      		.db	$80
FE5D: C5C2    		.dw	word_1002
FE5F: AD      		.db	$ad
              	; +
FE60: 80      		.db	$80
FE61: CFC2    		.dw	word_1003
FE63: AB      		.db	$ab
              	; AND
FE64: 80      		.db	$80
FE65: D4C2    		.dw	word_1004
FE67: 010E84  		.db	$1,$e,$84
              	; OR
FE6A: 80      		.db	$80
FE6B: DEC2    		.dw	word_1005
FE6D: 0F92    		.db	$f,$92
              	; XOR
FE6F: 80      		.db	$80
FE70: E8C2    		.dw	word_1006
FE72: 180F92  		.db	$18,$f,$92
              	; /
FE75: 80      		.db	$80
FE76: F2C2    		.dw	word_1007
FE78: AF      		.db	$af
              	; MOD
FE79: 80      		.db	$80
FE7A: FCC2    		.dw	word_1008
FE7C: 0D0F84  		.db	$d,$f,$84
              	; !
FE7F: 80      		.db	$80
FE80: 05C3    		.dw	word_1009
FE82: A1      		.db	$a1
              	; @
FE83: 80      		.db	$80
FE84: 0DC3    		.dw	word_1010
FE86: 80      		.db	$80
              	; +!
FE87: 80      		.db	$80
FE88: 15C3    		.dw	word_1011
FE8A: 2BA1    		.db	$2b,$a1
              	; C!
FE8C: 80      		.db	$80
FE8D: 21C3    		.dw	word_1012
FE8F: 03A1    		.db	$3,$a1
              	; C@
FE91: 80      		.db	$80
FE92: 26C3    		.dw	word_1013
FE94: 0380    		.db	$3,$80
              	; P@
FE96: 80      		.db	$80
FE97: 2DC3    		.dw	word_1014
FE99: 1080    		.db	$10,$80
              	; P!
FE9B: 80      		.db	$80
FE9C: 35C3    		.dw	word_1015
FE9E: 10A1    		.db	$10,$a1
              	; ,
FEA0: 80      		.db	$80
FEA1: 3BC3    		.dw	word_1016
FEA3: AC      		.db	$ac
              	; ;
FEA4: 81      		.db	$81
FEA5: 41C3    		.dw	word_1017
FEA7: BB      		.db	$bb
              	; C,
FEA8: 80      		.db	$80
FEA9: 47C3    		.dw	word_1018
FEAB: 03AC    		.db	$3,$ac
              	; COPY
FEAD: 80      		.db	$80
FEAE: 4EC3    		.dw	word_1019
FEB0: 030F1099		.db	$3,$f,$10,$99
              	; FILL
FEB4: 80      		.db	$80
FEB5: 6EC3    		.dw	word_1020
FEB7: 06090C8C		.db	$6,$9,$c,$8c
              	; HALT
FEBB: 80      		.db	$80
FEBC: 81C3    		.dw	word_1021
FEBE: 08010C94		.db	$8,$1,$c,$94
              	; BREAK
FEC2: 80      		.db	$80
FEC3: 88C3    		.dw	word_1022
FEC5: 02120501		.db	$2,$12,$5,$1,$8b
FEC9: 8B      	
              	; *
FECA: 80      		.db	$80
FECB: 8DC3    		.dw	word_1023
FECD: AA      		.db	$aa
              	; SWAP
FECE: 80      		.db	$80
FECF: 93C3    		.dw	word_1024
FED1: 13170190		.db	$13,$17,$1,$90
              	; A>B
FED5: 80      		.db	$80
FED6: 98C3    		.dw	word_1025
FED8: 013E82  		.db	$1,$3e,$82
              	; A>C
FEDB: 80      		.db	$80
FEDC: 9EC3    		.dw	word_1026
FEDE: 013E83  		.db	$1,$3e,$83
              	; B>A
FEE1: 80      		.db	$80
FEE2: A4C3    		.dw	word_1027
FEE4: 023E81  		.db	$2,$3e,$81
              	; B>C
FEE7: 80      		.db	$80
FEE8: AAC3    		.dw	word_1028
FEEA: 023E83  		.db	$2,$3e,$83
              	; C>A
FEED: 80      		.db	$80
FEEE: B0C3    		.dw	word_1029
FEF0: 033E81  		.db	$3,$3e,$81
              	; C>B
FEF3: 80      		.db	$80
FEF4: B6C3    		.dw	word_1030
FEF6: 033E82  		.db	$3,$3e,$82
              	; PUSH
FEF9: 81      		.db	$81
FEFA: BCC3    		.dw	word_1031
FEFC: 10151388		.db	$10,$15,$13,$88
              	; POP
FF00: 81      		.db	$81
FF01: C1C3    		.dw	word_1032
FF03: 100F90  		.db	$10,$f,$90
              	; A>R
FF06: 81      		.db	$81
FF07: C7C3    		.dw	word_1033
FF09: 013E92  		.db	$1,$3e,$92
              	; R>A
FF0C: 81      		.db	$81
FF0D: CCC3    		.dw	word_1034
FF0F: 123E81  		.db	$12,$3e,$81
              	; B>R
FF12: 81      		.db	$81
FF13: D1C3    		.dw	word_1035
FF15: 023E92  		.db	$2,$3e,$92
              	; R>B
FF18: 81      		.db	$81
FF19: D6C3    		.dw	word_1036
FF1B: 123E82  		.db	$12,$3e,$82
              	; C>R
FF1E: 81      		.db	$81
FF1F: DBC3    		.dw	word_1037
FF21: 033E92  		.db	$3,$3e,$92
              	; R>C
FF24: 81      		.db	$81
FF25: E0C3    		.dw	word_1038
FF27: 123E83  		.db	$12,$3e,$83
              	; AB>R
FF2A: 81      		.db	$81
FF2B: E5C3    		.dw	word_1039
FF2D: 01023E92		.db	$1,$2,$3e,$92
              	; R>AB
FF31: 81      		.db	$81
FF32: EBC3    		.dw	word_1040
FF34: 123E0182		.db	$12,$3e,$1,$82
              	; ABC>R
FF38: 81      		.db	$81
FF39: F1C3    		.dw	word_1041
FF3B: 0102033E		.db	$1,$2,$3,$3e,$92
FF3F: 92      	
              	; R>ABC
FF40: 81      		.db	$81
FF41: F8C3    		.dw	word_1042
FF43: 123E0102		.db	$12,$3e,$1,$2,$83
FF47: 83      	
              	; H
FF48: 80      		.db	$80
FF49: FFC3    		.dw	word_1043
FF4B: 88      		.db	$88
              	; $SYSTEM
FF4C: 80      		.db	$80
FF4D: 07C4    		.dw	word_1044
FF4F: 24131913		.db	$24,$13,$19,$13,$14,$5,$8d
FF53: 14058D  	
              	; WARM.START
FF56: 80      		.db	$80
FF57: 0FC4    		.dw	word_1045
FF59: 1701120D		.db	$17,$1,$12,$d,$2e,$13,$14,$1,$12,$94
FF5D: 2E131401	
FF61: 1294    	
              	; REPORT.ERROR
FF63: 80      		.db	$80
FF64: 15C4    		.dw	word_1046
FF66: 1205100F		.db	$12,$5,$10,$f,$12,$14,$2e,$5,$12,$12,$f,$92
FF6A: 12142E05	
FF6E: 12120F92	
              	; CONSTANT
FF72: 80      		.db	$80
FF73: 1BC4    		.dw	word_1047
FF75: 030F0E13		.db	$3,$f,$e,$13,$14,$1,$e,$94
FF79: 14010E94	
              	; VARIABLE
FF7D: 80      		.db	$80
FF7E: 30C4    		.dw	word_1048
FF80: 16011209		.db	$16,$1,$12,$9,$1,$2,$c,$85
FF84: 01020C85	
              	; ARRAY
FF88: 80      		.db	$80
FF89: 45C4    		.dw	word_1049
FF8B: 01121201		.db	$1,$12,$12,$1,$99
FF8F: 99      	
              	; ADDRESS.OF
FF90: 80      		.db	$80
FF91: 61C4    		.dw	word_1050
FF93: 01040412		.db	$1,$4,$4,$12,$5,$13,$13,$2e,$f,$86
FF97: 0513132E	
FF9B: 0F86    	
              	; !!
FF9D: 81      		.db	$81
FF9E: 75C4    		.dw	word_1051
FFA0: 21A1    		.db	$21,$a1
              	; @@
FFA2: 81      		.db	$81
FFA3: 86C4    		.dw	word_1052
FFA5: 0080    		.db	$0,$80
              	; ---
FFA7: 80      		.db	$80
FFA8: 8FC4    		.dw	word_1053
FFAA: 2D2DAD  		.db	$2d,$2d,$ad
              	; --
FFAD: 80      		.db	$80
FFAE: 95C4    		.dw	word_1054
FFB0: 2DAD    		.db	$2d,$ad
              	; ++
FFB2: 80      		.db	$80
FFB3: 9AC4    		.dw	word_1055
FFB5: 2BAB    		.db	$2b,$ab
              	; +++
FFB7: 80      		.db	$80
FFB8: 9FC4    		.dw	word_1056
FFBA: 2B2BAB  		.db	$2b,$2b,$ab
              	; 0-
FFBD: 80      		.db	$80
FFBE: A5C4    		.dw	word_1057
FFC0: 30AD    		.db	$30,$ad
              	; 0<
FFC2: 80      		.db	$80
FFC3: B0C4    		.dw	word_1058
FFC5: 30BC    		.db	$30,$bc
              	; 0=
FFC7: 80      		.db	$80
FFC8: BBC4    		.dw	word_1059
FFCA: 30BD    		.db	$30,$bd
              	; 2*
FFCC: 80      		.db	$80
FFCD: C6C4    		.dw	word_1060
FFCF: 32AA    		.db	$32,$aa
              	; 4*
FFD1: 80      		.db	$80
FFD2: CBC4    		.dw	word_1061
FFD4: 34AA    		.db	$34,$aa
              	; 8*
FFD6: 80      		.db	$80
FFD7: D1C4    		.dw	word_1062
FFD9: 38AA    		.db	$38,$aa
              	; 16*
FFDB: 80      		.db	$80
FFDC: D8C4    		.dw	word_1063
FFDE: 3136AA  		.db	$31,$36,$aa
              	; 2/
FFE1: 80      		.db	$80
FFE2: E0C4    		.dw	word_1064
FFE4: 32AF    		.db	$32,$af
              	; 4/
FFE6: 80      		.db	$80
FFE7: E8C4    		.dw	word_1065
FFE9: 34AF    		.db	$34,$af
              	; ABS
FFEB: 80      		.db	$80
FFEC: F4C4    		.dw	word_1066
FFEE: 010293  		.db	$1,$2,$93
              	; BSWAP
FFF1: 80      		.db	$80
FFF2: FDC4    		.dw	word_1067
FFF4: 02131701		.db	$2,$13,$17,$1,$90
FFF8: 90      	
              	; NOT
FFF9: 80      		.db	$80
FFFA: 04C5    		.dw	word_1068
FFFC: 0E0F94  		.db	$e,$f,$94
FFFF: 00      		.db	$00


total time: 0.0108 sec.
no errors
