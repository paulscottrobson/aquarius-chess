// ***************************************************************************************
// ***************************************************************************************
//
//		Name : 		console.m7
//		Author :	Paul Robson (paul@robsons.org.uk)
//		Date : 		16th October 2021
//		Purpose :	M7 Console library
//
// ***************************************************************************************
// ***************************************************************************************

require stdlib,intstr

:con.pos 	variable 									// Position in char memory
:con.x   	variable 									// Coordinates
:con.y  	variable 
:con.colour variable 									// Colour byte (fgr and bgr)

:con.scroll [22] constant 								// This is the scrolling are size, it is split like the Speccy
:con.base [$3028] constant  							// Start location (con.clear is different)
:con.width [40] constant 								// Screen size.
:con.height [24] constant

[ $20 con.colour ! ] 									// Initialise colour

//
// 		Home cursor
//
:con.home 	
	ab>r 
		0 con.x !! 0 con.y !! con.base con.pos !!
	r>ab ;

//
// 		Set ink and paper
//
:con.ink 
	ab>r 
		15 and a>r con.colour @@ $0F and con.colour !! r>a 16* con.colour +! 
	r>ab ;

:con.paper 
	ab>r
		15 and a>r con.colour @@ $F0 and con.colour !! r>a con.colour +! 
	r>ab ;

//
// 		Clear screen home cursor
//
:con.clear abc>r 
	con.home 
	1024 a>c 
	$3000 $20 fill
	$3400 con.colour @@ fill 
r>abc ;

//
// 		Clear non scrolled area
//
:con.clear.edit 
	abc>r
	con.height con.scroll - con.width * a>c
	con.scroll con.width * con.base + a>r $20 fill
	r>a $400 + con.colour @@ fill
	r>abc
;

//
// 		Scroll 20 screen lines
//
:_con.scroll 
	con.scroll -- con.width * a>c  						// (n-1) * 40 
	con.base $3050 copy 									// Scroll up chars
	$3428 $3450 copy 									// Scroll up colour
	40 a>c 												// blank line size
	con.scroll -- con.width * con.base + a>r	$20 fill 	// blank text
	r>a 1024 + con.colour @@ fill 						// set to current colour.
	-1 con.y +! 										// Fix position
	con.width 0- con.pos +!
;

//
//		Down one line at EOL.
//
:_con.down 
	1 con.y +! 0 con.x !! 								// Down one, back to left
	con.y @@ con.scroll = if _con.scroll then ; 			// Scroll required.
;

//
// 		Emit char, no controls.
//
:_con.emit 	
	con.pos @ c!  										// Write char
	con.pos @@ 1024 + con.colour @@ swap c!  			// Write colour
	1 con.pos +! 1 con.x +! 							// Right one
	con.x @@ con.width = if _con.down then  			// Next line ?
;

//
// 		CR to start of next line
//
:con.cr 
		abc>r
		repeat 
			32 _con.emit 
		con.x @@ 0= until 
		r>abc
;

//
// 		Char print with check for CR
//
:con.emit 
		abc>r 
		a>r 13 = if 
			r>a con.cr 
		else 
			r>a _con.emit 
		then 
		r>abc 
;

//
//		Print ASCIIZ string
//
:con.print 
		ab>r 
		repeat 
			a>b c@ if con.emit else r>ab ; then
			b>a ++
		forever
;

//
// 		Move cursor to B , A
//
:con.move
	ab>r
		b>r con.y !! r>a con.x !!
		con.y @@ 40 * con.x @@ + con.base + con.pos !!
	r>ab
;

//
//		Check / Get keyboard
// 		Keyboard routine in Aquarius ROM at $1EA2
//
:con.inkey
		[ $cd c, $1ea2 , $6f c, $26 c, $00 c, ] 		// CALL $1EA2 ; LD L,A ; LD H,$00
;

:con.get 
		repeat con.inkey until 
;

//
// 		Push/Pull state
//
:con.push.state
	r>c
	con.x @@ a>r con.y @@ a>r con.pos @@ a>r con.colour @@ a>r
	c>r 
;

:con.pop.state
	r>c
	r>a con.colour !! r>a con.pos !! r>a con.y !! r>a con.x !! 
	c>r 
;
