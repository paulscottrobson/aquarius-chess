// ***************************************************************************************
// ***************************************************************************************
//
//		Name : 		stdlib.m7
//		Author :	Paul Robson (paul@robsons.org.uk)
//		Date : 		16th October 2021
//		Purpose :	M7 Standard library
//
// ***************************************************************************************
// ***************************************************************************************

//
// 		Switch to slow/fast mode.
//
:slow 0 $1000 c! ;
:fast 1 $1000 c! ;

//
// 		Switch to fast so it compiles quickly.
//
[fast]

//
// 		Word which unpicks the call to generate call code, thus making word immediate
//
:make.immediate -3 h +! ;

//
//		Word which makes a word immediate which is itself immediate
//
:immediate [make.immediate] make.immediate ;

//
// 		This makes a word compile only, executing it causes an error.
//
//		This is immediate as well.
//
:compile.only [make.immediate] 
	$dictionary c@ $01 or $dictionary c! 
;
//
// 		Temps for structures
//
:_times_loop variable 
:_repeat_loop variable 
:_if_patch variable 

//
// 		Top of times loop n times counts n-1 .. 0
//
:times immediate compile.only
		h @@ _times_loop !! 	// Save loop back address
		$2B c, 					// DEC  HL
		$E5 c, 					// PUSH HL
;

//
// 		Bottom of times loop
//
:tend immediate compile.only
		$E1 c,					// POP HL
		$7C c, 					// LD A,H
		$B5 c,					// OR L
		$C2 c, _times_loop @@ , // JP NZ,<loop>
;

//
// 		Repeat loop
//
:repeat immediate compile.only
		h @@ _repeat_loop !!
;

//
// 		Repeat terminators
//
:until immediate compile.only
		$7C c, 					// LD A,H
		$B5 c,					// OR L
		$CA c, _repeat_loop @@ ,// JP Z,<loop>
;

:forever immediate  compile.only
		$C3 c, _repeat_loop @@ ,// JP <loop>
;

//
// 		If non zero
//
:if immediate  compile.only
		$7C c, 					// LD A,H
		$B5 c,					// OR L
		$CA c, 					// JP Z,
		h @@ _if_patch !!  		// Save jump patch
		0 , 		
;

//
// 		If negative
//
:-if immediate  compile.only
		$CB c, $7C c, 			// BIT 7,H
		$CA c, 					// JP Z,
		h @@ _if_patch !!  		// Save jump patch
		0 , 		
;

:else immediate  compile.only
		H @@ 3 + _if_patch @@ ! // Set the jump address of IF to three on.
		$C3 c, 					// JP 
		h @@ _if_patch !!  		// Save jump patch
		0 , 		
;

:then immediate  compile.only
		h @@ _if_patch @@ !
;
